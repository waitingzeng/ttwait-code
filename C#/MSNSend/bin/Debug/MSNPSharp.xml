<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSNPSharp</name>
    </assembly>
    <members>
        <member name="T:MSNPSharp.MSNObject">
            <summary>
            The MSNObject can hold an image, display, emoticon, etc.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObject.LoadFile(System.String)">
            <summary>
            Gets or sets the file location. When a file is set the file data is immediately read in memory to extract the filehash. It will retain in memory afterwards.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:MSNPSharp.MSNObject.UpdateInCollection">
            <summary>
            Updates the msn object in the global MSNObjectCatalog.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObject.GetStreamHash(System.IO.Stream)">
            <summary>
            Calculates the hash of datastream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObject.#ctor">
            <summary>
            Creates a MSNObject.
            </summary>		
        </member>
        <member name="F:MSNPSharp.MSNObject.contextRe">
            <summary>
            
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObject.ParseContext(System.String)">
            <summary>
            Parses a context send by the remote contact and set the corresponding class variables. Context input is assumed to be not base64 encoded.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MSNPSharp.MSNObject.ParseContext(System.String,System.Boolean)">
            <summary>
            Parses a context send by the remote contact and set the corresponding class variables.
            </summary>
            <param name="context"></param>
            <param name="base64Encoded"></param>
        </member>
        <member name="M:MSNPSharp.MSNObject.#ctor(System.String,System.IO.Stream,MSNPSharp.MSNObjectType,System.String)">
            <summary>
            Constructs a MSN object based on a (memory)stream. The client programmer is responsible for inserting this object in the global msn object collection.
            The stream must remain open during the whole life-length of the application.
            </summary>
            <param name="creator"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="location"></param>
        </member>
        <member name="M:MSNPSharp.MSNObject.#ctor(System.String,System.String,MSNPSharp.MSNObjectType)">
            <summary>
            Constructs a MSN object based on a physical file. The client programmer is responsible for inserting this object in the global msn object collection.
            </summary>
            <param name="creator"></param>
            <param name="type"></param>
            <param name="fileLocation"></param>
        </member>
        <member name="M:MSNPSharp.MSNObject.OpenStream">
            <summary>
            Returns the stream to read from. In case of an in-memory stream that stream is returned. In case of a filelocation
            a stream to the file will be opened and returned. The stream is not guaranteed to positioned at the beginning of the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObject.GetEncodeString(System.String)">
            <summary>
            Returns the "url-encoded xml" string for MSNObjects.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObject.CalculateChecksum">
            <summary>
            Calculates the checksum for the entire MSN Object.
            </summary>
            <remarks>This value is used to uniquely identify a MSNObject.</remarks>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObject.GetXmlString">
            <summary>
            Returns the xml string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObject.GetEncodedString">
            <summary>
            Returns the url-encoded xml string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.MSNObject.DataStream">
            <summary>
            The datastream to write to, or to read from
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.Creator">
            <summary>
            The local contact list owner
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.OriginalContext">
            <summary>
            The original context string that was send by the remote contact
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.Size">
            <summary>
            The total data size
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.ObjectType">
            <summary>
            The type of MSN Object
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.Location">
            <summary>
            The location of the object. This is a location on the hard-drive. Use relative paths. This is only a text string; na data is read in after setting this field. Use FileLocation for that purpose.
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.FileLocation">
            <summary>
            [Deprecated, use LoadFile()] Gets or sets the file location. When a file is set the file data is immediately read in memory to extract the filehash. It will retain in memory afterwards.
            </summary>        
        </member>
        <member name="P:MSNPSharp.MSNObject.Sha">
            <summary>
            The SHA1 encrypted hash of the datastream.
            </summary>
            <remarks>
            Usually the application programmer don't need to set this itself.
            </remarks>
        </member>
        <member name="P:MSNPSharp.MSNObject.Context">
            <summary>
            The context as an url-encoded xml string.
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObject.ContextPlain">
            <summary>
            The context as an xml string, not url-encoded.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="T:MSNPSharp.NSMessageHandler">
            <summary>
            Handles the protocol messages from the notification server
            and implements protocol version MSNP18.
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.IMessageHandler">
            <summary>
            IMessageHandler defines the methods required to handle incoming network messages.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.IMessageHandler.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            A IMessageProcessor calls this method. The handler can then process the
            message.
            </summary>
            <remarks>
            </remarks>
            <param name="message"></param>
            <param name="sender"></param>
        </member>
        <member name="P:MSNPSharp.Core.IMessageHandler.MessageProcessor">
            <summary>
            Gets or sets the processor of network messages. 
            Every message handler is associated with a single message processor.
            This way the handler can initiate, or send, messages which are not a reply
            on incoming messages.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPhoneNumberHome(System.String)">
            <summary>
            Sets the telephonenumber for the contact list owner's homephone.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPhoneNumberWork(System.String)">
            <summary>
            Sets the telephonenumber for the contact list owner's workphone.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPhoneNumberMobile(System.String)">
            <summary>
            Sets the telephonenumber for the contact list owner's mobile phone.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetMobileAccess(System.Boolean)">
            <summary>
            Sets whether the contact list owner allows remote contacts to send messages to it's mobile device.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetMobileDevice(System.Boolean)">
            <summary>
            Sets whether the contact list owner has a mobile device enabled.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SendMobileMessage(MSNPSharp.Contact,System.String)">
            <summary>
            Sends a mobile message to the specified remote contact. This only works when the remote contact has it's mobile device enabled and has MSN-direct enabled.
            </summary>
            <param name="receiver"></param>
            <param name="text"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SendMobileMessage(MSNPSharp.Contact,System.String,System.String,System.String)">
            <summary>
            Sends a mobile message to the specified remote contact. This only works when the remote contact has it's mobile device enabled and has MSN-direct enabled.
            </summary>
            <param name="receiver"></param>
            <param name="text"></param>
            <param name="callbackNumber"></param>
            <param name="callbackDevice"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.RequestSwitchboard(System.Object)">
            <summary>
            Sends a request to the server to start a new switchboard session.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.RequestSwitchboard(MSNPSharp.SBMessageHandler,System.Object)">
            <summary>
            Sends a request to the server to start a new switchboard session. The specified switchboard handler will be associated with the new switchboard session.
            </summary>
            <param name="switchboardHandler">The switchboard handler to use. A switchboard processor will be created and connected to this handler.</param>
            <param name="initiator">The object that initiated the request for the switchboard.</param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SendPing">
            <summary>
            Sends PNG (ping) command.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.RequestScreenName(MSNPSharp.Contact)">
            <summary>
            Send the server a request for the contact's screen name.
            </summary>
            <remarks>
            When the server replies with the screen name the Name property of the <see cref="T:MSNPSharp.Contact"/> will
            be updated.
            </remarks>
            <param name="contact"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetScreenName(System.String)">
            <summary>
            Sets the contactlist owner's screenname. After receiving confirmation from the server
            this will set the Owner object's name which will in turn raise the NameChange event.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPersonalMessage(MSNPSharp.PersonalMessage)">
            <summary>
            Sets personal message.
            </summary>
            <param name="pmsg"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPrivacyMode(MSNPSharp.PrivacyMode)">
            <summary>
            Set the contactlist owner's privacy mode.
            </summary>
            <param name="privacy">New privacy setting</param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetNotifyPrivacyMode(MSNPSharp.NotifyPrivacy)">
            <summary>
            Set the contactlist owner's notification mode on contact service.
            </summary>
            <param name="privacy">New notify privacy setting</param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SetPresenceStatus(MSNPSharp.PresenceStatus)">
            <summary>
            Set the status of the contact list owner (the client).
            </summary>
            <remarks>You can only set the status _after_ SignedIn event. Otherwise you won't receive online notifications from other clients or the connection is closed by the server.</remarks>
            <param name="status"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.JoinCircleConversation(System.Guid,System.String)">
            <summary>
            Send a PUT command notifying the server we join to a circle(gruop) conversation.
            </summary>
            <param name="circleId"></param>
            <param name="hostDomain"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnProcessorDisconnectCallback(System.Object,System.EventArgs)">
            <summary>
            Called when the message processor has disconnected.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnProcessorConnectCallback(System.Object,System.EventArgs)">
            <summary>
            Called when the message processor has established a connection. This function will 
            begin the login procedure by sending the VER command.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SendInitialMessage">
            <summary>
            Send the first message to the server.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnVERReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a VER command has been received. 
            </summary>
            <remarks>
            Indicates that the server has approved our version of the protocol. This function will send the CVR command.
            <code>VER [Transaction] [Protocol1] ([Protocol2]) [Clientversion]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnCVRReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a CVR command has been received. 
            </summary>
            <remarks>
            Indicates that the server has approved our client details. This function will send the USR command. 
            <code>CVR [Transaction] [Recommended version] [Recommended version] [Minimum version] [Download url] [Info url]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUSRReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a USR command has been received. 
            </summary>
            <remarks>
            
            <code>USR [Transaction] [SSO|OK] [Account] [Policy|Verified] [Nonce]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnSignedIn(System.EventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.SignedIn"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnSignedOff(MSNPSharp.SignedOffEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.SignedOff"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnContactStatusChanged(MSNPSharp.ContactStatusChangedEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.ContactStatusChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnContactOffline(MSNPSharp.ContactEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.ContactOffline"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnContactOnline(MSNPSharp.ContactEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.ContactOnline"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.ParseStatus(MSNPSharp.PresenceStatus)">
            <summary>
            Translates MSNStatus enumeration to messenger's textual status presentation.
            </summary>
            <param name="status">MSNStatus enum object representing the status to translate</param>
            <returns>The corresponding textual value</returns>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.ParseStatus(System.String)">
            <summary>
            Translates messenger's textual status to the corresponding value of the Status enum.
            </summary>
            <param name="status">Textual MSN status received from server</param>
            <returns>The corresponding enum value</returns>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUBXReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a UBX command has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnNLNReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a NLN command has been received.
            </summary>
            <remarks>
            Indicates that a contact on the forward list went online.
            <code>NLN [status] [clienttype:account] [name] [clientcapacities:48] [displayimage] (MSNP18)</code>
            <code>NLN [status] [account] [clienttype] [name] [clientcapacities:0] [displayimage] (MSNP16)</code>
            <code>NLN [status] [account] [clienttype] [name] [clientcapacities] [displayimage] (MSNP15)</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnFLNReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a FLN command has been received.
            </summary>
            <remarks>
            Indicates that a user went offline.
            <code>FLN [clienttype:account] [caps:0] [networkpng] (MSNP18)</code>
            <code>FLN [account] [clienttype] [caps:0] [networkpng] (MSNP16)</code>
            <code>FLN [account] [clienttype] [caps] [networkpng] (MSNP15)</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnOUTReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when an OUT command has been received.
            </summary>
            <remarks>
            Indicates that the server has signed off the user.
            <code>OUT [Reason]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUBNReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a UBN command has been received.
            </summary>
            <remarks>
            <code>UBN [account;{GUID}] [1:xml data,2:sip invite, 3: MSNP2P SLP data, 4:logout, 10: unknown] [PayloadLegth]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUUNReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a UUN command has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUUXReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a UUX command has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnCHGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a CHG command has been received.
            </summary>
            <remarks>
            The notification server has confirmed our request for a status change. 
            This function sets the status of the contactlist owner.
            <code>CHG [Transaction] [Status]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.CreateSBHandler(MSNPSharp.Core.IMessageProcessor,System.String,System.Int32)">
            <summary>
            Gets a new switchboard handler object. Called when a remote client initiated the switchboard.
            </summary>
            <param name="processor"></param>
            <param name="sessionHash"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnSBCreated(MSNPSharp.SBMessageHandler,System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.SBCreated"/> event.
            </summary>
            <param name="switchboard">The switchboard created</param>
            <param name="initiator">The object that initiated the switchboard request.</param>
            <param name="account"></param>
            <param name="name"></param>
            <param name="anonymous">Indecates that whether it is an anonymous request.</param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnRNGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a RNG command has been received.
            </summary>
            <remarks>
            Indicates that the user receives a switchboard session (chatsession) request. A connection to the switchboard will be established
            and the corresponding events and objects are created.
            <code>RNG [Session] [IP:Port] 'CKI' [Hash] [Account] [Name] U messenger.msn.com 1</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnXFRReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a XFR command has been received.
            </summary>
            <remarks>
            Indicates that the notification server has send us the location of a switch-board server in order to
            make contact with a client, or that we must switch to a new notification server.
            <code>XFR [Transaction] [SB|NS] [IP:Port] ['0'|'CKI'] [Hash|CurrentIP:CurrentPort]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnUBMReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a UBM command has been received, this message was sent by a Yahoo Messenger client.
            </summary>
            <remarks>
            Indicates that the notification server has send us a UBM. This is usually a message from Yahoo Messenger.
            <code>UBM [Remote user account] 32 [Destination user account] [3(nudge) or 2(typing) or 1(text message)] [Length]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnNOTReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a NOT command has been received.
            </summary>
            <remarks>
            Indicates that a notification message has been received.
            <code>NOT [body length]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnMSGReceived(MSNPSharp.Core.MSNMessage)">
            <summary>
            Called when a MSG command has been received.
            </summary>
            <remarks>
            Indicates that the notification server has send us a MSG.
            This is usually a MSG from the 'HOTMAIL' user (account is also 'HOTMAIL') which includes notifications
            about the contact list owner's profile, new mail, number of unread mails in the inbox, offline messages, etc.
            <code>MSG [Account] [Name] [Length]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnMailChanged(MSNPSharp.MailChangedEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.MailboxChanged"/> event.
            </summary>
            <remarks>Called when the owner has removed or moved e-mail.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnMailboxStatusReceived(MSNPSharp.MailboxStatusEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.MailboxStatusReceived"/> event.
            </summary>
            <remarks>Called when the server sends the status of the owner's mailbox.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnMailNotificationReceived(MSNPSharp.NewMailEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.NewMailReceived"/> event.
            </summary>
            <remarks>Called when the owner has received new e-mail, or e-mail has been removed / moved.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnMobileMessageReceived(MSNPSharp.TextMessageEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.MobileMessageReceived"/> event.
            </summary>
            <remarks>Called when the owner has received a mobile message.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.GetMSNList(System.String)">
            <summary>
            Translates the codes used by the MSN server to a MSNList object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnADLReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a ADL command has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnRMLReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a RML command has been received.
            </summary>
            <remarks>Indicates that someone was removed from a list by local user (RML [Trans-ID] OK)
            or local user was removed from someone's reverse list (RML 0 [Trans-ID]\r\n[payload]).</remarks>
            <param name="nsMessage"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnADGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when an ADG command has been received.
            </summary>
            <remarks>
            Indicates that a contact group has been added to the contact group list.
            Raises the ContactService.ContactGroupAdded event.
            <code>ADG [Transaction] [ListVersion] [Name] [GroupID] </code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnRMGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a RMG command has been received.
            </summary>
            <remarks>
            Indicates that a contact group has been removed.
            Raises the ContactService.ContactGroupRemoved event.
            <code>RMG [Transaction] [ListVersion] [GroupID]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnFQYReceived(MSNPSharp.Core.NSMessage)">
            <summary>Called when a FQY (Federated Query) command has been received.
            <remarks>Indicates a client has different network types except PassportMember.</remarks>
            <code>FQY [TransactionID] [PayloadLength]
            <ml><d n="domain"><c n="username" t="clienttype" actual="emailaddresswithoutcountrysuffix" /></d></ml>
            </code>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnNFYReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a NFY command has been received.
            <remarks>Indicates that a circle operation occured.</remarks>
            <code>
            NFY [TransactionID] [Operation: PUT|DEL] [Payload Length]\r\n[Payload Data]
            </code>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnSDGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a SDG command has been received.
            <remarks>Indicates that someone send us a message from a circle group.</remarks>
            <code>
            SDG 0 [Payload Length]\r\n[Payload Data]
            </code>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnCHLReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a CHL (challenge) command message has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnPRPReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when an PRP command has been received.
            </summary>
            <remarks>
            Informs about the phone numbers of the contact list owner.
            <code>PRP [TransactionID] [ListVersion] PhoneType Number</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnPUTReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a PUT command message has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnQRYReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a QRY (challenge) command message has been received.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnQNGReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a QNG command has been received.
            </summary>
            <remarks>
            Indicates a ping answer. The number of seconds indicates the timespan in which another ping must be send.
            <code>QNG [Seconds]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnBLPReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a BLP command has been received.
            </summary>
            <remarks>
            Indicates that the server has send the privacy mode for the contact list owner.
            <code>BLP [Transaction] [SynchronizationID] [PrivacyMode]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnGCFReceived(MSNPSharp.Core.NSMessage)">
            <summary>
            Called when a GCF command has been received. 
            </summary>
            <remarks>Indicates that the server has send bad words for messaging.</remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.Clear">
            <summary>
            Clears all resources associated with a nameserver session.
            </summary>
            <remarks>
            Called after we the processor has disconnected. This will clear the contactlist and free other resources.
            </remarks>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles message from the processor.
            </summary>
            <remarks>
            This is one of the most important functions of the class.
            It handles incoming messages and performs actions based on the commands in the messages.
            Many commands will affect the data objects in MSNPSharp, like <see cref="T:MSNPSharp.Contact"/> and <see cref="T:MSNPSharp.ContactGroup"/>.
            For example contacts are renamed, contactgroups are added and status is set.
            Exceptions which occur in this method are redirected via the <see cref="E:MSNPSharp.NSMessageHandler.ExceptionOccurred"/> event.
            </remarks>
            <param name="sender">The message processor that dispatched the message.</param>
            <param name="message">The network message received from the notification server</param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnServerErrorReceived(MSNPSharp.MSNErrorEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.ServerErrorReceived"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnExceptionOccurred(MSNPSharp.ExceptionEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.ExceptionOccurred"/> event.
            </summary>
            <param name="e">The exception event args</param>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.OnAuthenticationErrorOccurred(MSNPSharp.ExceptionEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.NSMessageHandler.AuthenticationError"/> event.
            </summary>
            <param name="e">The exception event args</param>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.BotMode">
            <summary>
            The library runs as a bot. Not to auto synchronize the addressbook when login.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.IsSignedIn">
            <summary>
            Defines whether the user is signed in the messenger network
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.AddressBookSynchronized">
            <summary>
            Keep track whether a address book synchronization has been completed so we can warn the client programmer
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.ExternalEndPoint">
            <summary>
            The end point as perceived by the server. This is set after the owner's profile is received.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.ContactList">
            <summary>
            A collection of all contacts which are on any of the lists of the person who logged into the messenger network
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.CensorWords">
            <summary>
            Censors that cannot contain in text messages.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.Owner">
            <summary>
            The owner of the contactlist. This is the identity that logged into the messenger network.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.ContactGroups">
            <summary>
            A collection of all contactgroups which are defined by the user who logged into the messenger network.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.CircleList">
            <summary>
            A collection of all circles which are defined by the user who logged into the messenger network.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.CircleMemberList">
            <summary>
            A collection of all circle which are defined by the user who logged into the messenger network.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.Credentials">
            <summary>
            These credentials are used for user authentication and client identification
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.ConnectivitySettings">
            <summary>
            If WebProxy is set the Webproxy is used for the
            authentication with Passport.com
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.ContactService">
            <summary>
            A service that provide contact operations.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.OIMService">
            <summary>
            Offline message service.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.StorageService">
            <summary>
            Storage Service for get/update display name, personal status, display picture etc.
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.MessageProcessor">
            <summary>
            The processor to handle the messages
            </summary>
        </member>
        <member name="P:MSNPSharp.NSMessageHandler.P2PHandler">
            <summary>
            The handler that handles all incoming P2P framework messages.
            </summary>
            <remarks>
            The handler is defined at the name server niveau which implies there is a single
            p2p handler instance for every logged in account. All switchboard sessions route their messages
            to this p2p handler. This enables the feature to start a p2p session in one switchboard session,
            and continue, or close it, in another switchboard session.
            </remarks>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.ExceptionOccurred">
            <summary>
            Occurs when an exception is thrown while handling the incoming or outgoing messages
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.AuthenticationError">
            <summary>
            Occurs when the user could not be signed in due to authentication errors. Most likely due to an invalid account or password. Note that this event will also raise the more general <see cref="E:MSNPSharp.NSMessageHandler.ExceptionOccurred"/> event.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.PingAnswer">
            <summary>
            Occurs when an answer is received after sending a ping to the MSN server via the SendPing() method
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.ContactStatusChanged">
            <summary>
            Occurs when any contact changes status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.ContactOnline">
            <summary>
            Occurs when any contact goes from offline status to another status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.ContactOffline">
            <summary>
            Occurs when any contact goed from any status to offline status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleStatusChanged">
            <summary>
            Occurs when any circle changes status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleOnline">
            <summary>
            Occurs when any circle goes from offline status to another status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleOffline">
            <summary>
            Occurs when any circle goes from any status to offline status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleMemberOnline">
            <summary>
            Occurs when any circle member goes from offline status to another status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleMemberOffline">
            <summary>
             Occurs when any circle member goes from any status to offline status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleMemberStatusChanged">
            <summary>
            Occurs when any circle member changes status.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleMemberLeft">
            <summary>
            Occurs when a member left the circle.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleMemberJoined">
            <summary>
            Occurs when a member joined the circle conversation.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.SignedIn">
            <summary>
            Occurs when the authentication and authorzation with the server has finished. The client is now connected to the messenger network.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.SignedOff">
            <summary>
            Occurs when the message processor has disconnected, and thus the user is no longer signed in.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.SBCreated">
            <summary>
            Occurs when a switchboard session has been created
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.MailboxStatusReceived">
            <summary>
            Occurs when the server notifies the client with the status of the owner's mailbox.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.NewMailReceived">
            <summary>
            Occurs when new mail is received by the Owner.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.MailboxChanged">
            <summary>
            Occurs when unread mail is read or mail is moved by the Owner.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.ServerErrorReceived">
            <summary>
            Occurs when the server sends an error.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.MobileMessageReceived">
            <summary>
            Occurs when we receive a mobile message.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleTypingMessageReceived">
            <summary>
            Occurs when a circle member is typing.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleNudgeReceived">
            <summary>
            Occurs when we receive a nudge message sent by a circle member.
            </summary>
        </member>
        <member name="E:MSNPSharp.NSMessageHandler.CircleTextMessageReceived">
            <summary>
            Occurs when we receive a text message sent from a circle.
            </summary>
        </member>
        <member name="T:MSNPSharp.NSMessageHandler.SwitchboardQueueItem">
            <summary>
            Class used for items stored in the switchboard queue.
            </summary>
        </member>
        <member name="F:MSNPSharp.NSMessageHandler.SwitchboardQueueItem.Initiator">
            <summary>
            The object that initiated the request.
            </summary>
        </member>
        <member name="F:MSNPSharp.NSMessageHandler.SwitchboardQueueItem.SwitchboardHandler">
            <summary>
            The switchboard handler that will be handling the new switchboard session.
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageHandler.SwitchboardQueueItem.#ctor(MSNPSharp.SBMessageHandler,System.Object)">
            <summary>
            Constructs a queue item.
            </summary>
            <param name="switchboardHandler"></param>
            <param name="initiator"></param>
        </member>
        <member name="T:MSNPSharp.IO.XMLContactList">
            <summary>
            ContactList file maintainer
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.MCLSerializer">
            <summary>
            Object serializer/deserializer class.
            <remarks>This class was used to save/load an object into/from a hidden mcl file.
            Any object needs to be serialized as a hidden mcl file should derive from this class.</remarks>
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.MCLSerializer.Save">
            <summary>
            Serialize and save the class into a file.
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.MCLSerializer.Save(System.String)">
            <summary>
            Serialize and save the class into a file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:MSNPSharp.IO.MCLSerializer.Version">
            <summary>
            The version of serialized object in the mcl file.
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.XMLContactList.Initialize">
            <summary>
            Initialize contacts from mcl file. Creates contacts based on MemberShipList, Groups, CircleResults and AddressbookContacts.
            MemberShipList, Groups, CircleResults and AddressbookContacts is pure clean and no contains DELTAS...
            So, member.Deleted is not valid here...
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.XMLContactList.op_Addition(MSNPSharp.IO.XMLContactList,MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResultType)">
            <summary>
            Merge changes into membership list and add membership contacts
            </summary>
            <param name="xmlcl"></param>
            <param name="findMembership"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.IO.XMLContactList.op_Addition(MSNPSharp.IO.XMLContactList,MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType)">
            <summary>
            Merge changes to addressbook and add address book contacts
            </summary>
            <param name="xmlcl">Addressbook</param>
            <param name="forwardList"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.IO.XMLContactList.InitializeMyProperties">
            <summary>
            Set MyProperties to default value.
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.XMLContactList.Save(System.String)">
            <summary>
            Save the <see cref="T:MSNPSharp.IO.XMLContactList"/> into a specified file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:MSNPSharp.ContactService">
            <summary>
            Provide webservice operations for contacts. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNService">
            <summary>
            Base class of webservice-related classes
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNService.ContactServiceRedirectionHost">
            <summary>
            Redirection host for service on *.omega.contacts.msn.com
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNService.StorageServiceRedirectionHost">
            <summary>
            Redirection host for service on *.storage.msn.com
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNService.RunAsyncMethod(MSNPSharp.BeforeRunAsyncMethodEventArgs)">
            <summary>
            Call an async webservice method by using the specific info.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.MSNService.OnServiceOperationFailed(System.Object,MSNPSharp.ServiceOperationFailedEventArgs)">
            <summary>
            Fires ServiceOperationFailed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:MSNPSharp.MSNService.ServiceOperationFailed">
            <summary>
            Fired when request to an async webservice method failed.
            </summary>
        </member>
        <member name="E:MSNPSharp.MSNService.AfterCompleted">
            <summary>
            Fired after asyc web service method completed.
            </summary>
        </member>
        <member name="E:MSNPSharp.MSNService.BeforeRunAsyncMethod">
            <summary>
            Fired before asyc web service method.
            </summary>
        </member>
        <member name="M:MSNPSharp.ContactService.OnReverseRemoved(MSNPSharp.ContactEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ReverseRemoved"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnReverseAdded(MSNPSharp.ContactEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ReverseAdded"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnContactAdded(MSNPSharp.ListMutateEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ContactAdded"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnContactRemoved(MSNPSharp.ListMutateEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ContactRemoved"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnContactGroupAdded(MSNPSharp.ContactGroupEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ContactGroupAdded"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnJoinCircleInvitationReceived(MSNPSharp.JoinCircleInvitationEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.JoinCircleInvitationReceived"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnJoinedCircleCompleted(MSNPSharp.CircleEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.JoinedCircleCompleted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnContactGroupRemoved(MSNPSharp.ContactGroupEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ContactGroupRemoved"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnCreateCircleCompleted(MSNPSharp.CircleEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.CreateCircleCompleted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnExitCircleCompleted(MSNPSharp.CircleEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.ExitCircleCompleted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnSynchronizationCompleted(System.EventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.SynchronizationCompleted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.OnInviteCircleMemberCompleted(MSNPSharp.CircleMemberEventArgs)">
            <summary>
            Fires the <see cref="E:MSNPSharp.ContactService.InviteCircleMemberCompleted"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.SynchronizeContactList">
            <summary>
            Rebuild the contactlist with the most recent data.
            </summary>
            <remarks>
            Synchronizing is the most complete way to retrieve data about groups, contacts, privacy settings, etc.
            This method is called automatically after owner profile received and then the addressbook is merged with deltas file.
            After that, SignedIn event occurs and the client programmer must set it's initial status by SetPresenceStatus(). 
            Otherwise you won't receive online notifications from other clients or the connection is closed by the server.
            If you have an external contact list, you must track ProfileReceived, SignedIn and SynchronizationCompleted events.
            Between ProfileReceived and SignedIn: the internal addressbook is merged with deltas file.
            Between SignedIn and SynchronizationCompleted: the internal addressbook is merged with most recent data by soap request.
            All contact changes will be fired between ProfileReceived, SignedIn and SynchronizationCompleted events. 
            e.g: ContactAdded, ContactRemoved, ReverseAdded, ReverseRemoved.
            </remarks>
        </member>
        <member name="M:MSNPSharp.ContactService.msRequest(MSNPSharp.PartnerScenario,MSNPSharp.MSNWS.MSNABSharingService.FindMembershipCompletedEventHandler)">
            <summary>
            Async membership request
            </summary>
            <param name="partnerScenario"></param>
            <param name="onSuccess">The delegate to be executed after async membership request completed successfuly</param>
        </member>
        <member name="M:MSNPSharp.ContactService.abRequest(MSNPSharp.PartnerScenario,MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedCompletedEventHandler)">
            <summary>
            Async Address book request
            </summary>
            <param name="partnerScenario"></param>
            <param name="onSuccess">The delegate to be executed after async ab request completed successfuly</param>
        </member>
        <member name="M:MSNPSharp.ContactService.abRequest(MSNPSharp.PartnerScenario,MSNPSharp.MSNWS.MSNABSharingService.abHandleType,MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedCompletedEventHandler)">
            <summary>
            Async Address book request
            </summary>
            <param name="partnerScenario"></param>
            <param name="abHandle">The specified addressbook to retrieve.</param>
            <param name="onSuccess">The delegate to be executed after async ab request completed successfuly</param>
        </member>
        <member name="M:MSNPSharp.ContactService.AddNewContact(System.String)">
            <summary>
            Creates a new contact on your address book and adds to allowed list if not blocked before.
            </summary>
            <param name="account">An email address or phone number to add. The email address can be yahoo account.</param>
            <remarks>The phone format is +CC1234567890 for phone contact, CC is Country Code</remarks>
        </member>
        <member name="M:MSNPSharp.ContactService.AddNewContact(System.String,System.String)">
            <summary>
            Creates a new contact on your address book and adds to allowed list if not blocked before.
            </summary>
            <param name="account">An email address or phone number to add. The email address can be yahoo account.</param>
            <param name="invitation">The reason of the adding contact</param>
            <remarks>The phone format is +CC1234567890, CC is Country Code</remarks>
        </member>
        <member name="M:MSNPSharp.ContactService.RemoveContact(MSNPSharp.Contact)">
            <summary>
            Remove the specified contact from your forward list.
            Note that remote contacts that are allowed/blocked remain allowed/blocked.
            </summary>
            <param name="contact">Contact to remove</param>
        </member>
        <member name="M:MSNPSharp.ContactService.AddContactGroup(System.String)">
            <summary>
            Send a request to the server to add a new contactgroup.
            </summary>
            <param name="groupName">The name of the group to add</param>
        </member>
        <member name="M:MSNPSharp.ContactService.RemoveContactGroup(MSNPSharp.ContactGroup)">
            <summary>
            Send a request to the server to remove a contactgroup. Any contacts in the group will also be removed from the forward list.
            </summary>
            <param name="contactGroup">The group to remove</param>
        </member>
        <member name="M:MSNPSharp.ContactService.RenameGroup(MSNPSharp.ContactGroup,System.String)">
            <summary>
            Set the name of a contact group
            </summary>
            <param name="group">The contactgroup which name will be set</param>
            <param name="newGroupName">The new name</param>
        </member>
        <member name="M:MSNPSharp.ContactService.AddContactToList(MSNPSharp.Contact,MSNPSharp.MSNLists,System.EventHandler)">
            <summary>
            Send a request to the server to add this contact to a specific list.
            </summary>
            <param name="contact">The affected contact</param>
            <param name="list">The list to place the contact in</param>
            <param name="onSuccess"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.RemoveContactFromList(MSNPSharp.Contact,MSNPSharp.MSNLists,System.EventHandler)">
            <summary>
            Send a request to the server to remove a contact from a specific list.
            </summary> 
            <param name="contact">The affected contact</param>
            <param name="list">The list to remove the contact from</param>
            <param name="onSuccess"></param>
        </member>
        <member name="M:MSNPSharp.ContactService.BlockContact(MSNPSharp.Contact)">
            <summary>
            Block this contact. After this you aren't able to receive messages from this contact. This contact
            will be placed in your block list and removed from your allowed list.
            </summary>
            <param name="contact">Contact to block</param>
        </member>
        <member name="M:MSNPSharp.ContactService.UnBlockContact(MSNPSharp.Contact)">
            <summary>
            Unblock this contact. After this you are able to receive messages from this contact. This contact
            will be removed from your blocked list and placed in your allowed list.
            </summary>
            <param name="contact">Contact to unblock</param>
        </member>
        <member name="M:MSNPSharp.ContactService.CreateCircle(System.String)">
            <summary>
            Use specific name to create a new <see cref="T:MSNPSharp.Circle"/>. <see cref="E:MSNPSharp.ContactService.CreateCircleCompleted"/> event will be fired after creation succeeded.
            </summary>
            <param name="circleName">New circle name.</param>
        </member>
        <member name="M:MSNPSharp.ContactService.BlockCircle(MSNPSharp.Circle)">
            <summary>
            Block a specific <see cref="T:MSNPSharp.Circle"/>. The ContactBlocked event of corresponding <see cref="T:MSNPSharp.Circle"/> will be fired after block operation succeeded.
            </summary>
            <param name="circle">The circle to block.</param>
        </member>
        <member name="M:MSNPSharp.ContactService.UnBlockCircle(MSNPSharp.Circle)">
            <summary>
            Unblock a specific <see cref="T:MSNPSharp.Circle"/>. The ContactUnBlocked event of corresponding <see cref="T:MSNPSharp.Circle"/> will be fired after unblock operation succeeded.
            </summary> 
            <param name="circle">The affected circle</param>
        </member>
        <member name="M:MSNPSharp.ContactService.InviteCircleMember(MSNPSharp.Circle,MSNPSharp.Contact)">
            <summary>
            Send and invitition to a specific contact to invite it join a <see cref="T:MSNPSharp.Circle"/>.
            </summary>
            <param name="circle">Circle to join.</param>
            <param name="contact">Contact being invited.</param>
        </member>
        <member name="M:MSNPSharp.ContactService.InviteCircleMember(MSNPSharp.Circle,MSNPSharp.Contact,System.String)">
            <summary>
            Send and invitition to a specific contact to invite it join a <see cref="T:MSNPSharp.Circle"/>. A message will send with the invitition.
            </summary>
            <param name="circle">Circle to join.</param>
            <param name="contact">Contact being invited.</param>
            <param name="message">Message send with the invitition email.</param>
            <exception cref="T:System.ArgumentNullException">One or more parameter(s) is/are null.</exception>
            <exception cref="T:System.InvalidOperationException">The owner is not the circle admin or the circle is blocked.</exception>
        </member>
        <member name="M:MSNPSharp.ContactService.RejectCircleInvitation(MSNPSharp.Circle)">
            <summary>
            Reject a join circle invitation.
            </summary>
            <param name="circle">Circle to  join.</param>
        </member>
        <member name="M:MSNPSharp.ContactService.AcceptCircleInvitation(MSNPSharp.Circle)">
            <summary>
            Accept the circle invitation.
            </summary>
            <param name="circle"></param>
            <exception cref="T:System.ArgumentNullException">The circle parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">The circle specified is not a pending circle.</exception>
        </member>
        <member name="M:MSNPSharp.ContactService.ExitCircle(MSNPSharp.Circle)">
            <summary>
            Leave the specific circle.
            </summary>
            <param name="circle"></param>
            <exception cref="T:System.ArgumentNullException">The circle parameter is null.</exception>
        </member>
        <member name="M:MSNPSharp.ContactService.DeleteRecordFile">
            <summary>
            Delete the record file that contains the contactlist of owner.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ContactAdded">
            <summary>
            Occurs when a contact is added to any list (including reverse list)
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ContactRemoved">
            <summary>
            Occurs when a contact is removed from any list (including reverse list)
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ReverseAdded">
            <summary>
            Occurs when another user adds us to their contactlist. A ContactAdded event with the reverse list as parameter will also be raised.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ReverseRemoved">
            <summary>
            Occurs when another user removes us from their contactlist. A ContactRemoved event with the reverse list as parameter will also be raised.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ContactGroupAdded">
            <summary>
            Occurs when a new contactgroup is created
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ContactGroupRemoved">
            <summary>
            Occurs when a contactgroup is removed
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.CreateCircleCompleted">
            <summary>
            Occurs when a new <see cref="T:MSNPSharp.Circle"/> is created.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.ExitCircleCompleted">
            <summary>
            Occurs when the owner has left a specific <see cref="T:MSNPSharp.Circle"/>.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.SynchronizationCompleted">
            <summary>
            Occurs when a call to SynchronizeList() has been made and the synchronization process is completed.
            This means all contact-updates are received from the server and processed.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.InviteCircleMemberCompleted">
            <summary>
            Fired after the InviteContactToCircle succeeded.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.JoinCircleInvitationReceived">
            <summary>
            Fired after a remote user invite us to join a circle.
            </summary>
        </member>
        <member name="E:MSNPSharp.ContactService.JoinedCircleCompleted">
            <summary>
            Fired after the owner join a circle successfully.
            </summary>
        </member>
        <member name="P:MSNPSharp.ContactService.AddressBookSynchronized">
            <summary>
            Keep track whether a address book synchronization has been completed.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMSendCompletedEventArgs.Sequence">
            <summary>
            OIM sequence number (OIMCount)
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMSendCompletedEventArgs.Message">
            <summary>
            Message content
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMSendCompletedEventArgs.Error">
            <summary>
            InnerException
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMSendCompletedEventArgs.Sender">
            <summary>
            OIM sender's email.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMSendCompletedEventArgs.Receiver">
            <summary>
            OIM receiver's email.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.ReceivedTime">
            <summary>
            The date and time you receive this message.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.Email">
            <summary>
            Sender account.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.NickName">
            <summary>
            Sender nickname.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.Message">
            <summary>
            Text message.
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.Guid">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:MSNPSharp.OIMReceivedEventArgs.IsRead">
            <summary>
            Set this to true if you don't want to receive this message
            next time you login.
            </summary>
        </member>
        <member name="T:MSNPSharp.SenderThrottleLimitExceededException">
            <summary>
            SenderThrottleLimitExceededException
            <remarks>If you get this exception, please wait at least 11 seconds then try to send the OIM again.</remarks>
            </summary>
        </member>
        <member name="T:MSNPSharp.OIMService">
            <summary>
            Provides webservice operation for offline messages
            </summary>
        </member>
        <member name="M:MSNPSharp.OIMService.processOIMS(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xmldata"></param>
            <param name="initial">if true, get all oims and sort by receive date</param>
        </member>
        <member name="M:MSNPSharp.OIMService.SendOIMMessage(System.String,System.String)">
            <summary>
            Send an offline message to a contact.
            </summary>
            <param name="account">Target user</param>
            <param name="msg">Plain text message</param>
        </member>
        <member name="M:MSNPSharp.OIMService.SendOIMMessage(MSNPSharp.Contact,MSNPSharp.TextMessage)">
            <summary>
            Send an offline message to a contact(only for MSNP18).
            </summary>
            <param name="receiver">Target user</param>
            <param name="msg"><see cref="T:MSNPSharp.TextMessage"/> to send</param>
        </member>
        <member name="E:MSNPSharp.OIMService.OIMReceived">
            <summary>
            Occurs when receive an OIM.
            </summary>
        </member>
        <member name="E:MSNPSharp.OIMService.OIMSendCompleted">
            <summary>
            Fires after an OIM was sent.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNObjectType">
            <summary>
            Defines the type of MSNObject.
            <para>Thanks for ZoroNaX : http://zoronax.spaces.live.com/blog/cns!4A0B813054895814!180.entry </para>
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.Unknown">
            <summary>
            Unknown msnobject type.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.Avatar">
            <summary>
            Avatar, Unknown
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.Emoticon">
            <summary>
            Emotion icon.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.UserDisplay">
            <summary>
            User display image.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.ShareFile">
            <summary>
            ShareFile, Unknown
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.Background">
            <summary>
            Background image.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.History">
            <summary>
            History
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.DynamicPicture">
            <summary>
            Deluxe Display Pictures
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.Wink">
            <summary>
            flash emoticon
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.MapFile">
            <summary>
            Map File  A map file contains a list of items in the store.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.DynamicBackground">
            <summary>
            Dynamic Backgrounds
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.VoiceClip">
            <summary>
            Voice Clip
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.SavedState">
            <summary>
            Plug-In State. Saved state of Add-ins.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.RoamingObject">
            <summary>
            Roaming Objects. For example, your roaming display picture.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectType.SignatureSound">
            <summary>
            Signature sound
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNObjectCatalog">
            <summary>
            A collection of all available MSN objects. This class is implemented following the singleton pattern.
            </summary>
            <remarks>
            In this collection all user display's, emoticons, etc for the entire application are stored.
            This allows for easy retrieval of the corresponding msn object by passing in the encrypted hash.
            Note: Use <see cref="M:MSNPSharp.MSNObjectCatalog.GetInstance"/> to get a reference to the global MSNObjectCatalog object on which you can call methods.
            </remarks>
        </member>
        <member name="F:MSNPSharp.MSNObjectCatalog.instance">
            <summary>
            The single instance
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNObjectCatalog.objectCollection">
            <summary>
            Collection of all msn objects
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.Get(System.String)">
            <summary>
            Returns the msn object with the supplied hash as checksum.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.Remove(System.String)">
            <summary>
            Removes the msn object with the specified checksum from the collection.
            </summary>
            <param name="checksum"></param>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.Remove(MSNPSharp.MSNObject)">
            <summary>
            Removes the specified msn object from the collection.
            </summary>
            <param name="msnObject"></param>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.Add(MSNPSharp.MSNObject)">
            <summary>
            Adds the MSNObject (a user display, emoticon, etc) in the global collection.		
            </summary>
            <param name="msnObject"></param>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.Add(System.String,MSNPSharp.MSNObject)">
            <summary>
            Adds the MSNObject (a user display, emoticon, etc) in the global collection, with the specified checksum as index.
            </summary>
            <param name="checksum"></param>
            <param name="msnObject"></param>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.GetInstance">
            <summary>
            Returns a reference to the global MSNObjectCatalog object.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.CopyTo(System.Array,System.Int32)">
            <summary>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MSNPSharp.MSNObjectCatalog.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.MSNObjectCatalog.IsSynchronized">
            <summary>
            Returns false,because ObjectCatalog is by default not synchronized.
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObjectCatalog.Count">
            <summary>
            The number of objects in the catalog.
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObjectCatalog.SyncRoot">
            <summary>
            </summary>
        </member>
        <member name="T:MSNPSharp.YIMMessageHandler">
            <summary>
            Handler for YIM messages
            </summary>
        </member>
        <member name="T:MSNPSharp.SBMessageHandler">
            <summary>
            Handles the messages from the switchboard server.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.Invite(MSNPSharp.Contact)">
            <summary>
            Invites the specified contact to the switchboard.
            </summary>
            <remarks>
            If there is not yet a connection established the invitation will be stored in a queue and processed as soon as a connection is established.
            </remarks>
            <param name="contact">The contact's account to invite.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SetInvitation(System.String,System.Int32)">
            <summary>
            Called when a switchboard session is created on request of a remote client.
            </summary>
            <param name="sessionHash"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SetInvitation(System.String)">
            <summary>
            Called when a switchboard session is created on request of a local client.
            </summary>
            <param name="sessionHash"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.Left">
            <summary>
            Left the conversation then closes the switchboard session by disconnecting from the server. 
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.Close">
            <summary>
            Closes the switchboard session by disconnecting from the server. 
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendTextMessage(MSNPSharp.TextMessage)">
            <summary>
            Sends a plain text message to all other contacts in the conversation.
            </summary>
            <remarks>
            This method wraps the TextMessage object in a SBMessage object and sends it over the network.
            </remarks>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendEmoticonDefinitions(System.Collections.Generic.List{MSNPSharp.Emoticon},MSNPSharp.EmoticonType)">
            <summary>
            Sends the definition for a list of emoticons to all other contacts in the conversation. The client-programmer must use this function if a text messages uses multiple emoticons in a single message.
            </summary>
            <remarks>Use this function before sending text messages which include the emoticon text. You can only send one emoticon message before the textmessage. So make sure that all emoticons used in the textmessage are included.</remarks>
            <param name="emoticons">A list of emoticon objects.</param>
            <param name="icontype">The type of current emoticons.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendTypingMessage">
            <summary>
            Sends a 'user is typing..' message to the switchboard, and is received by all participants.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendNudge">
            <summary>
            Sends a 'nudge' message to the switchboard, and is received by all participants.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendKeepAliveMessage">
            <summary>
            Send a keep-alive message to avoid the switchboard closing. This is useful for bots.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnAllContactsLeft">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.AllContactsLeft"/> event.
            </summary>		
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnContactJoined(MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.ContactJoined"/> event.
            </summary>
            <param name="contact">The contact who joined the session.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnContactLeft(MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.ContactLeft"/> event.
            </summary>
            <param name="contact">The contact who left the session.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnEmoticonDefinition(MSNPSharp.Core.MSGMessage,MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.UserTyping"/> event.
            </summary>
            <param name="message">The emoticon message.</param>
            <param name="contact">The contact who is sending the definition.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnNudgeReceived(MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.NudgeReceived"/> event.
            </summary>
            <param name="contact">The contact who is sending the nudge.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnUserTyping(MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.UserTyping"/> event.
            </summary>
            <param name="contact">The contact who is typing.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnTextMessageReceived(MSNPSharp.TextMessage,MSNPSharp.Contact)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.TextMessageReceived"/> event.
            </summary>
            <param name="message">The message send.</param>
            <param name="contact">The contact who sended the message.</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnSessionClosed">
            <summary>
            Fires the SessionClosed event.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnSessionEstablished">
            <summary>
            Fires the SessionEstablished event and processes invitations in the queue.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.ProcessInvitations">
            <summary>
            Handles all remaining invitations. If no connection is yet established it will do nothing.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendInvitationCommand(MSNPSharp.Contact)">
            <summary>
            Sends the invitation command to the switchboard server.
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.SendInitialMessage">
            <summary>
            Send the first message to the server.
            </summary>
            <remarks>
            Depending on the <see cref="P:MSNPSharp.SBMessageHandler.Invited"/> field a ANS command (if true), or a USR command (if false) is send.
            </remarks>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnANSReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a ANS command has been received.
            </summary>
            <remarks>
            Indicates that the server has replied to our identification ANS command.
            <code>ANS [Transaction] ['OK']</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnBYEReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a BYE command has been received.
            </summary>
            <remarks>
            Indicates that a remote contact has leaved the session.
            This will fire the <see cref="E:MSNPSharp.SBMessageHandler.ContactLeft"/> event. Or, if all contacts have left, the <see cref="E:MSNPSharp.SBMessageHandler.AllContactsLeft"/> event.
            <code>BYE [account[;GUID]] [Client Type]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnCALReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a CAL command has been received.
            </summary>
            <remarks>
            Indicates that the server has replied to our request to invite a contact.
            <code>CAL [Transaction] ['RINGING'] [sessionId]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnIROReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a IRO command has been received.
            </summary>
            <remarks>
            Indicates that a remote contact was already present in the session that was joined.
            <code>IRO [Transaction] [Current] [Total] [account[;GUID]] [DisplayName] [Caps]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnJOIReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a JOI command has been received.
            </summary>
            <remarks>
            Indicates that a remote contact has joined the session.
            This will fire the <see cref="E:MSNPSharp.SBMessageHandler.ContactJoined"/> event.
            <code>JOI [account[;GUID]] [DisplayName] [Caps]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnUSRReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a USR command has been received.
            </summary>
            <remarks>
            Indicates that the server has replied to our identification USR command.
            <code>USR [Transaction] ['OK'] [account[;GUID]] [name]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnMSGReceived(MSNPSharp.Core.MSNMessage)">
            <summary>
            Called when a MSG command has been received.
            </summary>
            <remarks>
            Indicates that a remote contact has send us a message. This can be a plain text message,
            an invitation, or an application specific message.
            <code>MSG [Account] [Name] [Bodysize]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnACKReceived(MSNPSharp.Core.SBMessage)">
            <summary>
            Called when a ACK command has been received.
            </summary>
            <remarks>
            <code>ACK [MSGTransid]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnProcessorConnectCallback(System.Object,System.EventArgs)">
            <summary>
            Called when the message processor has established a connection. This function will 
            begin the login procedure by sending the USR or ANS command.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnProcessorDisconnectCallback(System.Object,System.EventArgs)">
            <summary>
            Called when the message processor has disconnected. This function will 
            set the IsSessionEstablished to false.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles message from the processor.
            </summary>
            <remarks>
            This is one of the most important functions of the class.
            It handles incoming messages and performs actions based on the commands in the messages.
            Exceptions which occur in this method are redirected via the <see cref="E:MSNPSharp.SBMessageHandler.ExceptionOccurred"/> event.
            </remarks>
            <param name="sender"></param>
            <param name="message">The network message received from the notification server</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnServerErrorReceived(MSNPSharp.MSNError)">
            <summary>
            Fires the ServerErrorReceived event.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.OnExceptionOccurred(System.Exception)">
            <summary>
            Fires the <see cref="E:MSNPSharp.SBMessageHandler.ExceptionOccurred"/> event.
            </summary>
            <param name="e">The exception which was thrown</param>
        </member>
        <member name="M:MSNPSharp.SBMessageHandler.ToString">
            <summary>
            Debug string
            </summary>
            <returns></returns>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.AllContactsLeft">
            <summary>
            Fired when the owner is the only contact left. If the owner leaves too the connection is automatically closed by the server.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.SessionClosed">
            <summary>
            Fired when the session is closed, either by the server or by the local client.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.SessionEstablished">
            <summary>
            Fired when a switchboard connection has been made and the initial handshaking commands are send. This indicates that the session is ready to invite or accept other contacts.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.ContactJoined">
            <summary>
            Fired when a contact joins. In case of a conversation with two people in it this event is called with the remote contact specified in the event argument.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.ContactLeft">
            <summary>
            Fired when a contact leaves the conversation.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.TextMessageReceived">
            <summary>
            Fired when a message is received from any of the other contacts in the conversation.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.EmoticonDefinitionReceived">
            <summary>
            Fired when a contact sends a emoticon definition.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.WinkReceived">
            <summary>
            Fired when a contact sends a wink.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.NudgeReceived">
            <summary>
            Fired when a contact sends a nudge.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.UserTyping">
            <summary>
            Fired when any of the other contacts is typing a message.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.ExceptionOccurred">
            <summary>
            Fired when an exception is thrown while handling the incoming or outgoing messages.
            </summary>
        </member>
        <member name="E:MSNPSharp.SBMessageHandler.ServerErrorReceived">
            <summary>
            Fired when the MSN Switchboard Server sends us an error.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.Contacts">
            <summary>
            A collection of all <i>remote</i> contacts present in this session
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.NSMessageHandler">
            <summary>
            The nameserver that received the request for the switchboard session
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.Invited">
            <summary>
            Indicates if the local client was invited to the session
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.IsSessionEstablished">
            <summary>
            Indicates if the session is ready to send/accept commands. E.g. the initial handshaking and identification has been completed.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.SessionHash">
            <summary>
            The hash identifier used to define this switchboard session.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.P2PHandler">
            <summary>
            Implements the P2P framework. This object is automatically created when a succesfull connection was made to the switchboard.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBMessageHandler.MessageProcessor">
            <summary>
            The processor to handle the messages
            </summary>
        </member>
        <member name="M:MSNPSharp.YIMMessageHandler.Invite(MSNPSharp.Contact)">
            <summary>
            Do nothing except fire OnContactJoined event and add the contact to the <see cref="T:MSNPSharp.Contact"/> property.
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:MSNPSharp.YIMMessageHandler.OnUBMReceived(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Called when a UBM command has been received, this message was sent by a Yahoo Messenger client.
            </summary>
            <remarks>
            Indicates that the notification server has send us a UBM. This is usually a message from Yahoo Messenger.
            <code>UBM [Remote user account] 32 [Destination user account] [3(nudge) or 2(typing) or 1(text message)] [Length]</code>
            </remarks>
            <param name="message"></param>
        </member>
        <member name="T:MSNPSharp.Core.SBMessagePool">
            <summary>
            Buffers and releases the messages for a switchboard
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.NSMessagePool">
            <summary>
            Buffers the incoming data from the notification server (NS).
            </summary>
            <remarks>
            The main purpose of this class is to ensure that MSG, IPG and NOT payload commands are processed
            only when they are complete. Payload commands can be quite large and may be larger
            than the socket buffer. This pool will buffer the data and release the messages, or commands,
            when they are fully retrieved from the server.
            </remarks>
        </member>
        <member name="T:MSNPSharp.Core.MessagePool">
            <summary>
            Stores incoming messages in a buffer and releases them only when all contents are received.
            </summary>
            <remarks>
            MessagePool buffers incoming raw byte data and releases this data only when the message is fully retrieved. 
            This supports when a single message is send in multiple packets.
            The descendants of this class have simple knowledge of the used protocol to identify whether a message is fully retrieved or not.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Core.MessagePool.#ctor">
            <summary>
            Constructor to instantiate a message pool.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.MessagePool.BufferData(System.IO.BinaryReader)">
            <summary>
            Buffers the incoming raw data internal. This method is often used after receiving incoming data from a socket or another source.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MSNPSharp.Core.MessagePool.GetNextMessageData">
            <summary>
            Retrieves the next message data from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.Core.MessagePool.MessageAvailable">
            <summary>
            Defines whether there is a message available to retrieve.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NSMessagePool.CreateNewBuffer">
            <summary>
            Creates a new memorystream to server as the buffer.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NSMessagePool.EnqueueCurrentBuffer">
            <summary>
            Enques the current buffer memorystem when a message is completely retrieved.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NSMessagePool.GetNextMessageData">
            <summary>
            Get the next message as a byte array. The returned data includes all newlines which seperate the commands ("\r\n")
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.NSMessagePool.BufferData(System.IO.BinaryReader)">
            <summary>
            Stores the raw data in a buffer. When a full message is detected it is inserted on the internal stack.
            You can retrieve these messages bij calling GetNextMessageData().
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:MSNPSharp.Core.NSMessagePool.MessageAvailable">
            <summary>
            Is true when there are message available to retrieve.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.NSMessagePool.BufferStream">
            <summary>
            This points to the current message we are writing to.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.NSMessagePool.BufferWriter">
            <summary>
            This is the interface to the bufferStream.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestMultipleSecurityTokens(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestMultipleSecurityTokensAsync(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestMultipleSecurityTokensAsync(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestSecurityToken(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestSecurityTokenAsync(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestSecurityTokenAsync(MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestMultipleSecurityTokensCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenService.RequestSecurityTokenCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityHeaderType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityHeaderType.UsernameToken">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityHeaderType.Timestamp">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityHeaderType.Assertion">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.UsernameTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.UsernameTokenType.Username">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.UsernameTokenType.Password">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.UsernameTokenType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedString">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedString.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedString.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ActionType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ActionType.Namespace">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ActionType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SupportedEnvType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SupportedEnvType.qname">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.NotUnderstoodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.NotUnderstoodType.qname">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.detail">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.detail.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.detail.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.reasontext">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.reasontext.lang">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.reasontext.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.subcode">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.subcode.Value">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.subcode.Subcode">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.faultcode">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.faultcode.Value">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.faultcode.Subcode">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault.Code">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault.Reason">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault.Node">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault.Role">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Fault.Detail">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Body">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Body.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Body.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Header">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Header.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Header.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Envelope">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Envelope.Header">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Envelope.Body">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Envelope.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.PropertiesType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.PropertiesType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.SecurityTokenReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Properties">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Generation">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.GenerationSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Offset">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.OffsetSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Length">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.LengthSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Label">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Nonce">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DerivedKeyTokenType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenReferenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenReferenceType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenReferenceType.Reference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenReferenceType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityTokenReferenceType.Usage">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType.URI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType.ValueType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityContextTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityContextTokenType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityContextTokenType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SecurityContextTokenType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertyType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertyType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertyType.Target">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertyType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertiesType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertiesType.SignatureProperty">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignaturePropertiesType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ManifestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ManifestType.Reference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ManifestType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.Transforms">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.DigestMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.DigestValue">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.URI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceType1.Type">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.TransformType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TransformType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TransformType.XPath">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TransformType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.DigestMethodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DigestMethodType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DigestMethodType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ObjectType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ObjectType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ObjectType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ObjectType.MimeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ObjectType.Encoding">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureValueType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureValueType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureValueType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureMethodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureMethodType.HMACOutputLength">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureMethodType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureMethodType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.CanonicalizationMethodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.CanonicalizationMethodType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.CanonicalizationMethodType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignedInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignedInfoType.CanonicalizationMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignedInfoType.SignatureMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignedInfoType.Reference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignedInfoType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType.SignedInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType.SignatureValue">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType.KeyInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType.Object">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SignatureType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.KeyName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.KeyValue">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.RetrievalMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.X509Data">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.PGPData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.SPKIData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.MgmtData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyInfoType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyValueType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyValueType.DSAKeyValue">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyValueType.RSAKeyValue">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyValueType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.P">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.Q">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.G">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.Y">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.J">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.Seed">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.DSAKeyValueType.PgenCounter">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RSAKeyValueType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RSAKeyValueType.Modulus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RSAKeyValueType.Exponent">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RetrievalMethodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RetrievalMethodType.Transforms">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RetrievalMethodType.URI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RetrievalMethodType.Type">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.X509IssuerSerial">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.X509SKI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.X509SubjectName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.X509Certificate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.X509CRL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509DataType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.X509IssuerSerialType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509IssuerSerialType.X509IssuerName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.X509IssuerSerialType.X509SerialNumber">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.PGPDataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.PGPDataType.PGPKeyID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.PGPDataType.PGPKeyPacket">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.PGPDataType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SPKIDataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SPKIDataType.SPKISexp">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SPKIDataType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeDesignatorType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeDesignatorType.AttributeName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeDesignatorType.AttributeNamespace">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeType.AttributeValue">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EvidenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EvidenceType.AssertionIDReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EvidenceType.Assertion">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.Conditions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.Advice">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.Statement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.SubjectStatement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.AuthenticationStatement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.AuthorizationDecisionStatement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.AttributeStatement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.Signature">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.MajorVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.MinorVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.AssertionID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.Issuer">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AssertionType.IssueInstant">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.AudienceRestrictionCondition">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.DoNotCacheCondition">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.Condition">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.NotBefore">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.NotBeforeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.NotOnOrAfter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionsType.NotOnOrAfterSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AudienceRestrictionConditionType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ConditionAbstractType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AudienceRestrictionConditionType.Audience">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.DoNotCacheConditionType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AdviceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AdviceType.AssertionIDReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AdviceType.Assertion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AdviceType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.StatementAbstractType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectStatementAbstractType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectStatementAbstractType.Subject">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectType.NameIdentifier">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectType.SubjectConfirmation">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.NameIdentifierType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.NameIdentifierType.NameQualifier">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.NameIdentifierType.Format">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.NameIdentifierType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectConfirmationType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectConfirmationType.ConfirmationMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectConfirmationType.SubjectConfirmationData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectConfirmationType.KeyInfo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeStatementType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributeStatementType.Attribute">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorizationDecisionStatementType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorizationDecisionStatementType.Action">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorizationDecisionStatementType.Evidence">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorizationDecisionStatementType.Resource">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorizationDecisionStatementType.Decision">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.DecisionType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.DecisionType.Permit">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.DecisionType.Deny">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.DecisionType.Indeterminate">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthenticationStatementType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthenticationStatementType.SubjectLocality">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthenticationStatementType.AuthorityBinding">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthenticationStatementType.AuthenticationMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthenticationStatementType.AuthenticationInstant">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectLocalityType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectLocalityType.IPAddress">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.SubjectLocalityType.DNSAddress">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorityBindingType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorityBindingType.AuthorityKind">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorityBindingType.Location">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthorityBindingType.Binding">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ServiceNameType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ServiceNameType.PortName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ServiceNameType.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ServiceNameType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedQName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedQName.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedQName.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceParametersType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceParametersType1.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferencePropertiesType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferencePropertiesType.Any">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.Address">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.ReferenceProperties">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.ReferenceParameters">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.PortType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.ServiceName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType1.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURI.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURI.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ProblemActionType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ProblemActionType.Action">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ProblemActionType.SoapAction">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ProblemActionType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Action">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURIType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURIType.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedURIType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.errorType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.errorType.value">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.errorType.internalerror">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.internalerrorType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.internalerrorType.code">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.internalerrorType.codeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.internalerrorType.text">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.IgnoreRememberMe">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.IgnoreRememberMeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.Domains">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.Expiry">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.extPropertyType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.credPropertyType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.credPropertyType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.credPropertyType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.browserCookieType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.browserCookieType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.browserCookieType.URL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.browserCookieType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.ServerTime">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.ServerTimeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.LocVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.RollingUpgradeState">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.Path">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.serverInfoType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.BinarySecretType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.BinarySecretType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedProofTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedProofTokenType.BinarySecret">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedTokenReferenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedTokenReferenceType.KeyIdentifier">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedTokenReferenceType.Reference">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.KeyIdentifierType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EncodedString">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.BinarySecurityTokenType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.CipherDataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.CipherDataType.CipherValue">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptionMethodType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptionMethodType.Algorithm">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType.EncryptionMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType.KeyInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType.CipherData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EncryptedDataType.Type">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedSecurityTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedSecurityTokenType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedSecurityTokenType.EncryptedData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedSecurityTokenType.BinarySecurityToken">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedSecurityTokenType.Assertion">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.LifetimeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.LifetimeType.Created">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.LifetimeType.Expires">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedDateTime">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedDateTime.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedDateTime.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AttributedDateTime.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.TokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.AppliesTo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.Lifetime">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.RequestedSecurityToken">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.RequestedAttachedReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.RequestedUnattachedReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.RequestedTokenReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenResponseType.RequestedProofToken">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AppliesTo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AppliesTo.EndpointReference">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType.Address">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType.ReferenceParameters">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType.Metadata">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.EndpointReferenceType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceParametersType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceParametersType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ReferenceParametersType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.MetadataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.MetadataType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.MetadataType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedAttachedReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedAttachedReference.SecurityTokenReference">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedUnattachedReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestedUnattachedReference.SecurityTokenReference">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.TokenType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.RequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.AppliesTo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.PolicyReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestTypeOpenEnum">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestTypeOpenEnum.httpschemasxmlsoaporgws200502trustIssue">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestTypeOpenEnum.httpschemasxmlsoaporgws200502trustRenew">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestTypeOpenEnum.httpschemasxmlsoaporgws200502trustCancel">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.PolicyReference">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.PolicyReference.URI">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType.RequestSecurityToken">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType.Created">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType.Expires">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.TimestampType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.PasswordString">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.Relationship">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Relationship.RelationshipType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Relationship.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.Relationship.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.To">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.serverVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.PUID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.configVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.uiVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.authstate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.reqstatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.serverInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.cookies">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.browserCookies">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.credProperties">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.extProperties">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.ppHeaderType.response">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RelatesToType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RelatesToType.RelationshipType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RelatesToType.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RelatesToType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.HostingApp">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.BinaryVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.UIVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.Cookies">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.RequestParams">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.AuthInfoType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestMultipleSecurityTokensCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNSecurityTokenService.RequestSecurityTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PFlag">
            <summary>
            Defines the type of P2P message.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.Normal">
            <summary>
            Normal (protocol) message.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.NegativeAck">
            <summary>
            Negative Ack
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.Acknowledgement">
            <summary>
            Acknowledgement message.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.Waiting">
            <summary>
            Waiting
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.Error">
            <summary>
            Messages notifies a binary error.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.File">
            <summary>
            File
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.Data">
            <summary>
            Messages defines a msn object.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.CloseSession">
            <summary>
            Close session
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.TlpError">
            <summary>
            Tlp error
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.DirectHandshake">
            <summary>
            Direct handshake
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.MSNSLPInfo">
            <summary>
            Messages for info data, such as INVITE, 200 OK, 500 INTERNAL ERROR
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.FileData">
            <summary>
            Messages defines data for a filetransfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PFlag.MSNObjectData">
            <summary>
            Messages defines data for a MSNObject transfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.FileTransferGuid">
            <summary>
            The guid used in invitations for a filetransfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.UserDisplayGuid">
            <summary>
            The guid used in invitations for a user display transfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.SharePhotoGuid">
            <summary>
            The guid used in invitations for a share photo.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.ActivityGuid">
            <summary>
            The guid used in invitations for an activity.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.DisplayImageFooter12">
            <summary>
            Footer for a msn DisplayImage p2pMessage.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.FileTransFooter2">
            <summary>
            Footer for a filetransfer p2pMessage.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.CustomEmoticonFooter11">
            <summary>
            Footer for a msn CustomEmoticon p2pMessage.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.DisplayImageFooter1">
            <summary>
            Footer for a msn object p2pMessage.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PConst.CustomEmoticonFooter1">
            <summary>
            Footer for a msn CustomEmoticon p2pMessage.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PMessage">
            <summary>
            Represents a single P2P framework message.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NetworkMessage.PrepareMessage">
            <summary>
            Format the message and make it ready to send.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.NetworkMessage.InnerBody">
            <summary>
            The byte array contains in the message stream
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.NetworkMessage.InnerMessage">
            <summary>
            Usually the payload of a payload message.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.CreateAcknowledgement">
            <summary>
            Creates an acknowledgement message to this message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.SplitMessage(System.Int32)">
            <summary>
            Split big P2PMessages to transport over sb or dc.
            </summary>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.ToString">
            <summary>
            Returns debug info
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.PrepareMessage">
            <summary>
            Sets the D as acknowledgement in the ParentMessage.ParentMessage. This should be a SBMessage object.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.GetBytes(System.Boolean)">
            <summary>
            Creates a P2P Message. This sets the MessageSize and TotalSize properly.
            </summary>
            <param name="appendFooter"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.ParseBytes(System.Byte[])">
            <summary>
            Parses the given message.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessage.GetInnerBytes">
            <summary>
            Returns the inner message as a byte array.
            </summary>
            <remarks>
            If the inner message is set the GetBytes() method is called upon that inner message.
            If there is no inner message set, but the InnerBody property contains data then
            that data is returned.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessage.Version">
            <summary>
            The p2p framework currently using.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessage.Footer">
            <summary>
            The footer, or Application Identifier (BIG ENDIAN).
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessage.InnerBody">
            <summary>
            Payload data
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessage.InnerMessage">
            <summary>
            SLP Message
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PDataMessage">
            <summary>
            Represents a single P2PDataMessage which is used for the actual data transfer. No negotiation handling.
            </summary>
            <remarks>
            A p2p data message can be identified by looking at the footer in the P2P Message.
            When this value is > 0 a data message is send. When this value is 0 a normal, and more complex, MSNSLPMessage is send.
            This class is created to provide a fast way of sending messages.
            </remarks>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDataMessage.#ctor(MSNPSharp.P2PVersion)">
            <summary>
            Constructs a P2P data message.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDataMessage.WritePreparationBytes">
            <summary>
            Writes 4 nul-bytes in the inner body. This message can then be used as a data preparation message.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDataMessage.WriteBytes(System.IO.Stream,System.Int32)">
            <summary>
            Writes data in the inner message buffer.
            </summary>
            <param name="ioStream"></param>
            <param name="maxLength"></param>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PDCMessage">
            <summary>
            A P2P Message which is send in a direct-connection.
            </summary>
            <remarks>
            The innerbody contents are used as message contents (data).
            The InnerMessage object and footer is ignored.
            </remarks>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCMessage.#ctor(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Copy constructor. Creates a shallow copy of the properties of the P2PMessage.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCMessage.GetBytes">
            <summary>
            Writes no footer, but a 4 byte length size in front of the header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCMessage.ParseBytes(System.Byte[])">
            <summary>
            Parses a data message without the 4-byte length header and without a 4 byte footer.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PDCHandshakeMessage">
            <summary>
            A P2P Message which is send in a direct-connection. (P2Pv1?)
            </summary>
            <remarks>The innerbody contents are used as message contents (data).
            The InnerMessage object is ignored.
            </remarks>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCHandshakeMessage.#ctor(MSNPSharp.P2PVersion)">
            <summary>
            Basic constructor
            </summary>
            <remarks>
            Defaults the Flags property to 0x100
            </remarks>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCHandshakeMessage.#ctor(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Copy constructor. Creates a shallow copy of the properties of the P2PMessage.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCHandshakeMessage.CreateAcknowledgement">
            <summary>
            Creates an acknowledgement message to a handshake message. This will only set the flag to 0 and
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCHandshakeMessage.GetBytes">
            <summary>
            Foo+HandshakeMessage+Guid. Writes no footer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PDCHandshakeMessage.Guid">
            <summary>
            The Guid to use in the handshake message.
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.NotificationMessage">
            <summary>
            Represents a single NOT or IPG message.
            </summary>
            <remarks>
            These messages are receid from, and send to, a nameserver. NOT messages are rececived for MSN-Calendar or MSN-Alert notifications.
            IPG commands are received/send to exchange pager (sms) messages.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.#ctor(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Constructs a NotificationMessage from the inner body contents of the specified message object.
            This will also set the InnerMessage property of the message object to the newly created NotificationMessage.
            </summary>
        </member>
        <member name="F:MSNPSharp.Core.NotificationMessage.notificationType">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.CreateXmlMessage">
            <summary>
            Creates a xml message based on the data in the object. It is used before the message is send to the server.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.GetBytes">
            <summary>
            Returns the command message as a byte array. This can be directly send over a networkconnection.
            </summary>
            <remarks>
            Remember to set the transaction ID before calling this method.
            Uses UTF8 Encoding.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.ParseBytes(System.Byte[])">
            <summary>
            Parses incoming byte data send from the network.
            </summary>
            <param name="data">The raw message as received from the server</param>
        </member>
        <member name="M:MSNPSharp.Core.NotificationMessage.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MSNPSharp.IO.SerializableDictionary`2">
            <summary>
            Serializable Dictionary
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="T:MSNPSharp.ConnectivityException">
            <summary>
            Specifies an exception when a connection is setup.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNPSharpException">
            <summary>
            The base class for all MSNPSharp related exceptions
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNPSharpException.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNPSharpException.#ctor(System.String)">
            <summary>
            Specifies a general exception.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
        </member>
        <member name="M:MSNPSharp.MSNPSharpException.#ctor(System.String,System.Exception)">
            <summary>
            Specifies a general exception but which originates from another exception.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
            <param name="innerException">The (inner)exception which caused this exception. For example a SocketException.</param>
        </member>
        <member name="M:MSNPSharp.MSNPSharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MSNPSharp.ConnectivityException.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.ConnectivityException.#ctor(System.String)">
            <summary>
            Specifies a ConnectivityException.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
        </member>
        <member name="M:MSNPSharp.ConnectivityException.#ctor(System.String,System.Exception)">
            <summary>
            Specifies a ConnectivityException which originates from another exception.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
            <param name="innerException">The (inner)exception which caused this exception. For example a SocketException</param>
        </member>
        <member name="M:MSNPSharp.ConnectivityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:MSNPSharp.Core.YIMMessage">
            <summary>
            Yahoo Messenger Message
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.RSIService">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMetadata(MSNPSharp.MSNWS.MSNRSIService.GetMetadataRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMetadataAsync(MSNPSharp.MSNWS.MSNRSIService.GetMetadataRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMetadataAsync(MSNPSharp.MSNWS.MSNRSIService.GetMetadataRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMessage(MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMessageAsync(MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMessageAsync(MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.DeleteMessages(MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.DeleteMessagesAsync(MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.DeleteMessagesAsync(MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNRSIService.RSIService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMetadataCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNRSIService.RSIService.GetMessageCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNRSIService.RSIService.DeleteMessagesCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.PassportCookie">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.PassportCookie.t">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.PassportCookie.p">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesResponseType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesRequestType.messageIds">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMessageResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMessageResponseType.GetMessageResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType.messageId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMessageRequestType.alsoMarkAsRead">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMetadataResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMetadataResponseType.MD">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.MetaData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetaData.M">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetaData.Q">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.T">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.S">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.RT">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.RTSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.RS">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.SZ">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.E">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.I">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.F">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.N">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetadataMessage.SU">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.MetaDataQ">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetaDataQ.QTM">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.MetaDataQ.QNM">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMetadataRequestType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMetadataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMetadataCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMetadataCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.GetMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.GetMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNRSIService.DeleteMessagesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.Core.IMessageProcessor">
            <summary>
            Defines methods to send network messages.
            </summary>
            <remarks>
            IMessageProcessor is the abstraction of an object which can send network messages.
            Network messages can be any kind of messages: text messages, data messages.
            By using this interface a de-coupling is established between the handling of messages
            and the I/O of messages.
            IMessageProcessor is mostly used internal.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Core.IMessageProcessor.SendMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Sends a message to be processed by the processor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.Core.IMessageProcessor.RegisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Registers a handler that wants to receive incoming messages.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.Core.IMessageProcessor.UnregisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Unregisters (removes) a handler that no lange wants to receive incoming messages.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.Core.SocketMessageProcessor.IsSocketConnected(System.Net.Sockets.Socket)">
            <summary>
            Show whether the socket is connected at a certain moment.
            </summary>
            <param name="socket"></param>
            <returns>true if socket is connected, false if socket is disconnected.</returns>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PMessagePool">
            <summary>
            Buffers incompleted P2PMessage SLP messages.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessagePool.BufferMessage(MSNPSharp.DataTransfer.P2PMessage@)">
            <summary>
            Buffers incompleted P2PMessage SLP messages. Ignores data and control messages. 
            </summary>
            <param name="p2pMessage"></param>
            <returns>
            true if the P2PMessage is buffering (not completed) or invalid packet received;
            false if the p2p message fully buffered or no need to buffer.
            </returns>
        </member>
        <member name="T:MSNPSharp.Credentials">
            <summary>
            Specifies the user credentials. These settings are used when authentication
            is required on the network.
            </summary>
            <remarks>
            The client identifier, together with the client code, represents
            a unique way of identifying the client connected to the network.
            
            Third party softwarehouses can request their own identifier/code combination
            for their software. These values have to be stored in the properties before connecting
            to the network.
            When you want to emulate the Microsoft MSN Messenger client, you can use any of the following
            values:
            <c>
            ClientID			ClientCode          Client Version              Acknowledgement
            msmsgs@msnmsgr.com	Q1P7W2E4J9R8U3S5 
            PROD0038W!61ZTF9	VT6PX?UQTM4WM%YR 
            PROD0058#7IL2{QD	QHDCY@7R1TB6W?5B 
            PROD0061VRRZH@4F	JXQ6J@TUOGYV@N0M
            PROD0119GSJUC$18    ILTXC!4IXB5FB*PX
            PROD0120PW!CCV9@    C1BX{V4W}Q3*10SM    WLM 2009 v14.0.8050.1202   http://twitter.com/mynetx
            </c>
            
            Note that officially you must use an obtained license (client id and client code) from Microsoft in order to access the network legally!
            After you have received your own license you can set the client id and client code in this class.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Credentials.#ctor">
            <summary>
            Constructor to instantiate a Credentials object.
            </summary>
        </member>
        <member name="M:MSNPSharp.Credentials.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor to instantiate a Credentials object with the specified values.
            </summary>
        </member>
        <member name="M:MSNPSharp.Credentials.#ctor(System.String,System.String,System.String,System.String,MSNPSharp.MsnProtocol)">
            <summary>
            Constructor to instantiate a Credentials object with the specified values and msn protocol speaking.
            </summary>
        </member>
        <member name="P:MSNPSharp.Credentials.MsnProtocol">
            <summary>
            Msn protocol
            </summary>
        </member>
        <member name="P:MSNPSharp.Credentials.ClientID">
            <summary>
            The client identifier used to identify the clientsoftware.
            </summary>
        </member>
        <member name="P:MSNPSharp.Credentials.ClientCode">
            <summary>
            The client code used to identify the clientsoftware.
            </summary>
        </member>
        <member name="P:MSNPSharp.Credentials.Password">
            <summary>
            Password for the account. Used when logging into the network.
            </summary>
        </member>
        <member name="P:MSNPSharp.Credentials.Account">
            <summary>
            The account the identity uses. A typical messenger account is specified as name@hotmail.com.
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.NSPayLoadMessage">
            <summary>
            NS payload message class, such as ADL and FQY
            <para>The format of these mseeages is: COMMAND TRANSID [PARAM1] [PARAM2] .. PAYLOADLENGTH\r\nPAYLOAD</para>
            <remarks>
            DONOT pass the payload length as command value, the payload length will be calculated automatically
            <para>
            <list type="bullet">
            List of NS payload commands:
            <item>
            RML
            <description>Remove contact </description>
            </item>
            <item>
            ADL
            <description>Add users to your contact lists.</description>
            </item>
            <item>
            FQY
            <description>Query client's network types except PassportMember</description>
            </item>
            <item>
            QRY
            <description>Response to CHL by client </description>
            </item>
            <item>NOT</item>
            <item>UBX</item>
            <item>GCF</item>
            <item>
            UBM
            <description>Yahoo messenger message command. You can also send the command as <see cref="T:MSNPSharp.Core.YIMMessage"/></description>
            </item>
            <item>IPG</item>
            <item>UUX</item>
            <item>MSG</item>
            <item>UBN</item>
            </list>
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.NSMessage.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MSNPSharp.Core.MSNHttpUtility">
            <summary>
            Provides methods for encoding and decoding URLs when processing Web requests. This class cannot be inherited. 
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.MSNObjectUrlEncode(System.String)">
            <summary>
            Encodes a MSNObject description using UTF-8 encoding by default.
            </summary>
            <param name="str">The MSNObject description to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string using UTF-8 encoding by default.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes a URL string using the specified encoding object.
            </summary>
            <param name="str">The text to encode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> object that specifies the encoding scheme. </param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.MSNObjectUrlDecode(System.String)">
            <summary>
            Decode an encoded <see cref="T:MSNPSharp.MSNObject"/>.
            </summary>
            <param name="str">The encoded MSNObject description.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.UrlDecode(System.String)">
            <summary>
            Converts a string that has been encoded for transmission in a URL into a decoded string using UTF-8 encoding by default.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Converts a URL-encoded string into a decoded string, using the specified encoding object.
            </summary>
            <param name="str">The string to decode.</param>
            <param name="e">The <see cref="T:System.Text.Encoding"/> that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.XmlEncode(System.String)">
            <summary>
            Encodes a Xml string.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.QPDecode(System.String)">
            <summary>
            Decode the QP encoded string.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:MSNPSharp.Core.MSNHttpUtility.QPDecode(System.String,System.Text.Encoding)">
            <summary>
            Decode the QP encoded string using an encoding
            </summary>
            <param name="value">The string to decode.</param>
            <param name="encode">The <see cref="T:System.Text.Encoding"/> that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="F:MSNPSharp.Core.MSNHttpUtility.UnSafe.UrlEscape">
            <summary>
            For url encode
            </summary>
        </member>
        <member name="F:MSNPSharp.Core.MSNHttpUtility.UnSafe.XMLEscape">
            <summary>
            For XML encode
            </summary>
        </member>
        <member name="F:MSNPSharp.Core.MSNHttpUtility.UnSafe.HTMLEscape">
            <summary>
            For HTML encode
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.HashedNonceGenerator.HashNonce(System.Guid)">
            <summary>
            Creates handshake guid using SHA1 hash algorithm. 
            </summary>
            <param name="nonce"></param>
            <returns>The output packed to handshake for direct connect</returns>
        </member>
        <member name="T:MSNPSharp.ConnectivitySettings">
            <summary>
            Defines the way how connections must be set up.
            </summary>
            <remarks>
            Via ConnectivitySettings the client can specify to which MSN server must be connected,
            whether or not proxy servers are used for internet connections and whether
            web proxys are used for accessing HTTP resources. The most common HTTP resource
            is the authentication with Passport.com during the login phase.
            </remarks>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor">
            <summary>
            Constructor to instantiate a ConnectivitySettings object.
            </summary>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor(MSNPSharp.ConnectivitySettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a ConnectivitySettings with custom host and port.
            </summary>
            <param name="host">Host of messenger server. Standard is messenger.hotmail.com</param>
            <param name="port">Port of messenger server. Standard is 1863</param>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor(System.String,System.Int32,System.Net.WebProxy)">
            <summary>
            Constructs a ConnectivitySettings which uses a Web proxy for all HTTP connections made.
            </summary>
            <param name="host">Host of messenger server. Standard is messenger.hotmail.com</param>
            <param name="port">Port of messenger server. Standard is 1863</param>
            <param name="webProxy">Webproxy to be used when accessing HTTP resources</param>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor(System.String,System.Int32,System.String,System.Int32,System.String,System.String,MSNPSharp.ProxyType)">
            <summary>
            Constructs a ConnectivitySettings which uses a proxy in all direct TCP communications with the messenger servers. This means HTTP resources for authenticating the user with Passport.com are accessed directly.
            </summary>
            <param name="host">Host of messenger server. Standard is messenger.hotmail.com</param>
            <param name="port">Port of messenger server. Standard is 1863</param>
            <param name="proxyHost">Host of the proxy server</param>
            <param name="proxyPort">Port of the proxy server</param>
            <param name="proxyUsername">Username, if any, used when accessing the proxyserver</param>
            <param name="proxyPassword">Password, if any, used when accessing the proxyserver</param>
            <param name="proxyType">The proxy version, Socks4 or Socks5</param>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.#ctor(System.String,System.Int32,System.String,System.Int32,System.String,System.String,MSNPSharp.ProxyType,System.Net.WebProxy)">
            <summary>
            Constructs a ConnectivitySettings which uses a socks proxy in all direct TCP communications with the messenger servers. HTTP resources are accessed via the supplied WebProxy.
            </summary>
            <param name="host">Host of messenger server. Standard is messenger.hotmail.com</param>
            <param name="port">Port of messenger server. Standard is 1863</param>
            <param name="proxyHost">Host of the proxy server</param>
            <param name="proxyPort">Port of the proxy server</param>
            <param name="proxyUsername">Username, if any, used when accessing the proxyserver</param>
            <param name="proxyPassword">Password, if any, used when accessing the proxyserver</param>
            <param name="proxyType">The proxy version, Socks4 or Socks5</param>
            <param name="webProxy">Webproxy to be used when accessing HTTP resources</param>
        </member>
        <member name="M:MSNPSharp.ConnectivitySettings.ToString">
            <summary>
            A string that shows the current host and port.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.Host">
            <summary>
            Hostname of the MSN server. Defaults is messenger.hotmail.com		
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.Port">
            <summary>
            Port of the MSN server. Default is 1863.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.ProxyHost">
            <summary>
            The host of the proxy. This must be filled in when ProxyType is set to something else than ProxyType.None.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.ProxyPort">
            <summary>
            The port used to access the proxy. This must be filled in when ProxyType is set to something else than ProxyType.None.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.ProxyUsername">
            <summary>
            The username used when accessing the proxy. This must be filled in when ProxyType is set to something else than ProxyType.None.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.ProxyPassword">
            <summary>
            The username used when accessing the proxy. This must be filled in when ProxyType is set to something else than ProxyType.None.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.ProxyType">
            <summary>
            The ProxyType used. If ProxyType is set to something else than ProxyType.None a proxy server is used, using Socks4 or Socks 5 depending on the type. Read-only.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConnectivitySettings.WebProxy">
            <summary>
            If this is not null a webproxy is used in all HTTP request in the library. An important HTTP request is the authentication with Passport.com.
            </summary>
        </member>
        <member name="T:MSNPSharp.Settings">
            <summary>
            General configuration options.
            </summary>
        </member>
        <member name="F:MSNPSharp.Settings.TraceSwitch">
            <summary>
            Defines the verbosity of the trace messages.
            </summary>
        </member>
        <member name="M:MSNPSharp.Settings.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MSNPSharp.Settings.IsMono">
            <summary>
            Indicates whether the runtime framework is currently mono or not.
            </summary>
        </member>
        <member name="P:MSNPSharp.Settings.SerializationType">
            <summary>
            File serialization type when saving.
            </summary>Compression saves spaces on disk, Encrypt protects your addressbook but eats some cpu<remarks>
            </remarks>
        </member>
        <member name="P:MSNPSharp.Settings.NoSave">
            <summary>
            Don't save addressbook files.
            </summary>
        </member>
        <member name="P:MSNPSharp.Settings.SavePath">
            <summary>
            Save directory
            </summary>
        </member>
        <member name="P:MSNPSharp.Settings.MSNTicketLifeTime">
            <summary>MSNTicket lifetime in minutes for the internal cache. Default is 20 minutes.</summary>
            <remarks>Keep small if the client will connect to the msn network for the short time.</remarks>
        </member>
        <member name="P:MSNPSharp.Settings.MSNTicketsCleanupInterval">
            <summary>
            Run clean up code for the MSNTickets in every x minutes. Default is 5 minutes.
            </summary>
        </member>
        <member name="P:MSNPSharp.Settings.EnableGzipCompressionForWebServices">
            <summary>
            Use Gzip compression for web services to save bandwidth.
            </summary>
            <remarks>Don't use this if you run .net framework on mono</remarks>
        </member>
        <member name="P:MSNPSharp.Settings.NoCompress">
            <summary>
            Don't use compression when saving addressbook files.
            </summary>
        </member>
        <member name="T:MSNPSharp.MailboxStatusEventArgs">
            <summary>
            Send as event argument when the server has send a (initial) mailbox status.
            </summary>
        </member>
        <member name="F:MSNPSharp.MailboxStatusEventArgs.inboxUnread">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailboxStatusEventArgs.foldersUnread">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailboxStatusEventArgs.inboxURL">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailboxStatusEventArgs.foldersURL">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailboxStatusEventArgs.postURL">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.MailboxStatusEventArgs.#ctor(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructory.
            </summary>
            <param name="inboxUnread"></param>
            <param name="foldersUnread"></param>
            <param name="inboxURL"></param>
            <param name="foldersURL"></param>
            <param name="postURL"></param>
        </member>
        <member name="P:MSNPSharp.MailboxStatusEventArgs.InboxUnread">
            <summary>
            Number of mails in the inbox which are unread
            </summary>
        </member>
        <member name="P:MSNPSharp.MailboxStatusEventArgs.FoldersUnread">
            <summary>
            Number of folders which are unread
            </summary>
        </member>
        <member name="P:MSNPSharp.MailboxStatusEventArgs.InboxURL">
            <summary>
            The URL to go directly to the inbox of the contactlist owner
            </summary>
        </member>
        <member name="P:MSNPSharp.MailboxStatusEventArgs.FoldersURL">
            <summary>
            The URL to go directly to the folders of the contactlist owner
            </summary>
        </member>
        <member name="P:MSNPSharp.MailboxStatusEventArgs.PostURL">
            <summary>
            The URL to go directly to the webpage to compose a new mail
            </summary>
        </member>
        <member name="T:MSNPSharp.MailChangedEventArgs">
            <summary>
            Send as event argument when unread mail has been read or the owner moves mail.
            </summary>
        </member>
        <member name="F:MSNPSharp.MailChangedEventArgs.sourceFolder">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailChangedEventArgs.destinationFolder">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.MailChangedEventArgs.count">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.MailChangedEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor, mainly used internal by the library.
            </summary>
            <param name="sourceFolder"></param>
            <param name="destinationFolder"></param>
            <param name="count"></param>
        </member>
        <member name="P:MSNPSharp.MailChangedEventArgs.SourceFolder">
            <summary>
            The source folder the mail(s) are moved from
            </summary>
        </member>
        <member name="P:MSNPSharp.MailChangedEventArgs.DestinationFolder">
            <summary>
            The destination folder the mail(s) are moved to
            </summary>
        </member>
        <member name="P:MSNPSharp.MailChangedEventArgs.Count">
            <summary>
            The number of mails moved
            </summary>
        </member>
        <member name="P:MSNPSharp.MailChangedEventArgs.MailsAreRead">
            <summary>
            Indicates whether mails are moved between folders or if unread mails are read.
            When sourcefolder and destination folder are the same this means the mails are not moved but read, and MailsRead will return true. Otherwise it will return false.
            </summary>
        </member>
        <member name="T:MSNPSharp.NewMailEventArgs">
            <summary>
            Send as event argument when the server notifies us of a new e-mail waiting.
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.from">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.messageUrl">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.postUrl">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.subject">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.destinationFolder">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.fromEmail">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.NewMailEventArgs.id">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.NewMailEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="from"></param>
            <param name="messageUrl"></param>
            <param name="postUrl"></param>
            <param name="subject"></param>
            <param name="destinationFolder"></param>
            <param name="fromEmail"></param>
            <param name="id"></param>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.From">
            <summary>
            The person's name who sended the e-mail
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.MessageUrl">
            <summary>
            The url to directly view the message in Hotmail
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.PostUrl">
            <summary>
            The post url used for automatic hotmail login
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.Subject">
            <summary>
            The subject of the e-mail
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.DestinationFolder">
            <summary>
            The folder the mail is redirected to
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.FromEmail">
            <summary>
            The e-mail adress of the person who sended the e-mail
            </summary>
        </member>
        <member name="P:MSNPSharp.NewMailEventArgs.Id">
            <summary>
            ID of the message, used for hotmail login
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObjectDataTransferCompletedEventArgs.Aborted">
            <summary>
            Transfer failed.
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNObjectDataTransferCompletedEventArgs.ClientData">
            <summary>
            The target msnobject.
            </summary>
        </member>
        <member name="T:MSNPSharp.Conversation">
            <summary>
            A facade to the underlying switchboard and YIM session.
            </summary>
            <remarks>
            Conversation implements a few features for the ease of the application programmer. It provides
            directly basic common functionality. However, if you need to perform more advanced actions, or catch
            other events you have to directly use the underlying switchboard handler, or switchboard processor.
            Conversation automatically requests emoticons used by remote contacts.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Conversation.ReCreate">
            <summary>
            Create a new conversation which contains the same users as the expired one.
            </summary>
            <returns>A new conversation.</returns>
            <exception cref="T:System.InvalidOperationException">The current conversation is not expired.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.#ctor(MSNPSharp.Messenger,MSNPSharp.SBMessageHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The messenger object that requests the conversation.</param>
            <param name="sbHandler">The switchboard to interface to.</param>		
        </member>
        <member name="M:MSNPSharp.Conversation.#ctor(MSNPSharp.Messenger)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The messenger object that requests the conversation.</param>
        </member>
        <member name="M:MSNPSharp.Conversation.Invite(System.String,MSNPSharp.ClientType)">
            <summary>
            Invite a remote contact to join the conversation.
            </summary>
            <param name="contactMail">Contact account</param>
            <param name="type">Contact type</param>
            <exception cref="T:System.InvalidOperationException">Operating on an ended conversation.</exception>
            <exception cref="T:System.NotSupportedException">Inviting mutiple YIM users into a YIM conversation, invite YIM users to a switchboard conversation, or passport members are invited into YIM conversation.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.Invite(MSNPSharp.Contact)">
            <summary>
            Invite a remote contact to join the conversation.
            </summary>
            <param name="contact">The remote contact to invite.</param>
            <exception cref="T:System.InvalidOperationException">Operating on an expired conversation will get this exception.</exception>
            <exception cref="T:System.NotSupportedException">Inviting mutiple YIM users into a YIM conversation, invite YIM users to a switchboard conversation, or passport members are invited into YIM conversation.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.End">
            <summary>
            End this conversation.
            </summary>
        </member>
        <member name="M:MSNPSharp.Conversation.HasContact(MSNPSharp.Contact)">
            <summary>
            Whether the specified contact is in the conversation.
            </summary>
            <param name="contact"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Conversation.SendTextMessage(MSNPSharp.TextMessage)">
            <summary>
            Sends a plain text message to all other contacts in the conversation.
            </summary>
            <remarks>
            This method wraps the TextMessage object in a SBMessage object and sends it over the network.
            </remarks>
            <param name="message">The message to send.</param>
            <exception cref="T:System.InvalidOperationException">Sending messages from an ended conversation.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.SendTypingMessage">
            <summary>
            Sends a 'user is typing..' message to the switchboard, and is received by all participants.
            </summary>
            <exception cref="T:System.InvalidOperationException">Sending messages from an ended conversation.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.SendNudge">
            <summary>
            Sends a 'nudge' message to the switchboard, and is received by all participants.
            </summary>
            <exception cref="T:System.InvalidOperationException">Sending messages from an ended conversation.</exception>
        </member>
        <member name="M:MSNPSharp.Conversation.SendEmoticonDefinitions(System.Collections.Generic.List{MSNPSharp.Emoticon},MSNPSharp.EmoticonType)">
            <summary>
            Sends the definition for a list of emoticons to all other contacts in the conversation. The client-programmer must use this function if a text messages uses multiple emoticons in a single message.
            </summary>
            <remarks>Use this function before sending text messages which include the emoticon text. You can only send one emoticon message before the textmessage. So make sure that all emoticons used in the textmessage are included.</remarks>
            <param name="emoticons">A list of emoticon objects.</param>
            <param name="icontype">The type of current emoticons.</param>
            <exception cref="T:System.InvalidOperationException">Operating on an ended conversation.</exception>
            <exception cref="T:System.NotSupportedException">Sending custom emoticons from a YIM conversation.</exception>
        </member>
        <member name="E:MSNPSharp.Conversation.AllContactsLeft">
            <summary>
            Fired when the owner is the only contact left. If the owner leaves too the connection is automatically closed by the server.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.SessionClosed">
            <summary>
            Fired when the session is closed, either by the server or by the local client.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.SessionEstablished">
            <summary>
            Occurs when a switchboard connection has been made and the initial handshaking commands are send. This indicates that the session is ready to invite or accept other contacts.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.ContactJoined">
            <summary>
            Fired when a contact joins. In case of a conversation with two people in it this event is called with the remote contact specified in the event argument.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.ContactLeft">
            <summary>
            Fired when a contact leaves the conversation.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.TextMessageReceived">
            <summary>
            Fired when a message is received from any of the other contacts in the conversation.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.EmoticonDefinitionReceived">
            <summary>
            Fired when a contact sends a emoticon definition.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.NudgeReceived">
            <summary>
            Fired when a contact sends a nudge
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.UserTyping">
            <summary>
            Fired when any of the other contacts is typing a message.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.ExceptionOccurred">
            <summary>
            Occurs when an exception is thrown while handling the incoming or outgoing messages.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.ServerErrorReceived">
            <summary>
            Occurs when the MSN Switchboard Server sends us an error.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.MSNObjectDataTransferCompleted">
            <summary>
            Fired when the data transfer for a MSNObject finished or aborted.
            </summary>
        </member>
        <member name="E:MSNPSharp.Conversation.ConversationEnded">
            <summary>
            Occurs when a new conversation is ended (all contacts in the conversation have left or <see cref="M:MSNPSharp.Conversation.End"/> is called).
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Contacts">
            <summary>
            Contacts once or currently in the conversation.
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Type">
            <summary>
            Indicates the type of current available switchboard in this conversation.
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Expired">
            <summary>
            Indicates whether all contacts in conversation have left.<br/>
            A YIM conversation will never expired. <br/>
            A switchboard conversation expired after all contacts left.
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Ended">
            <summary>
            Indicates whether the conversation is ended by user.<br/>
            If a conversation is ended, it can't be used to send any message.
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.AutoRequestEmoticons">
            <summary>
            Indicates whether emoticons from remote contacts are automatically retrieved
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.AutoKeepAlive">
            <summary>
            Indicates whether the conversation will never expired until the owner close it. <br/>
            If true, <see cref="E:MSNPSharp.Conversation.SessionClosed"/> will never fired and a keep-alive message will send to the switchboard every <see cref="P:MSNPSharp.Conversation.KeepAliveMessagePeriod"/> seconds.
            </summary>
            <exception cref="T:System.InvalidOperationException">Setting this property on an ended conversation.</exception>
            <exception cref="T:System.NotSupportedException">Setting this property for a YIM conversation or an expired conversation.</exception>
        </member>
        <member name="P:MSNPSharp.Conversation.KeepAliveMessagePeriod">
            <summary>
            The period between two keep-alive messages sent (In second).
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Messenger">
            <summary>
            Messenger that created the conversation
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.SwitchboardProcessor">
            <summary>
            The switchboard processor. Sends and receives messages over the switchboard connection
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.Switchboard">
            <summary>
            The switchboard handler. Handles incoming/outgoing messages.<br/>
            If the conversation ended, this property will be null.
            </summary>
        </member>
        <member name="P:MSNPSharp.Conversation.YIMHandler">
            <summary>
            Yahoo! Message handler.<br/>
            If the conversation ended, this property will be null.
            </summary>
        </member>
        <member name="M:MSNPSharp.CircleMemberList.Add(MSNPSharp.CircleContactMember)">
            <summary>
            Add a new member to the list.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.CircleMemberList.Contains(System.String)">
            <summary>
            Check whether a specified member is in the circle.
            </summary>
            <param name="fullaccount">The format is [type:account;via=circletype:guid@hostdomain]</param>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.CircleMemberList.Item(System.String)">
            <summary>
            Get a member by providing an full account which format is: [type:account;via=circletype:guid@hostdomain]
            </summary>
            <param name="fullaccount"></param>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.CircleList.Item(System.Guid,System.String)">
            <summary>
            Find <see cref="T:MSNPSharp.Circle"/> by circle Id and host domain if circle not found, return null.
            </summary>
            <param name="abId">Circle id</param>
            <param name="hostDomain">Circle host domain.</param>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.CircleList.Item(System.String)">
            <summary>
            Find <see cref="T:MSNPSharp.Circle"/> by circle Id and host domain, if circle not found, return null.
            </summary>
            <param name="id">Via Id: guid@hostdomain</param>
            <returns></returns>
        </member>
        <member name="T:MSNPSharp.MSNStorageService">
            <summary>
            Provide webservice operations for Storage Service
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNStorageService.CreateProfile">
            <summary>
            Initialize the user profile if the contact connect to live network the firt time.
            
            CreateProfile
            ShareItem
            AddMember
            [GetProfile]
            CreateDocument
            CreateRelationships
            UpdateProfile
            FindDocuments
            UpdateDynamicItem - Error
            ABContactUpdate
            
            9 steps, what the hell!! If M$ change any protocol in their strageservice, it will be a disaster to find the difference.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNStorageService.GetProfile">
            <summary>
            Get my profile. Display name, personal status and display photo.
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNStorageService.UpdateProfile(System.String,System.String)">
            <summary>
            Update personal displayname and status in profile
            </summary>
            <param name="displayName"></param>
            <param name="personalStatus"></param>
        </member>
        <member name="M:MSNPSharp.MSNStorageService.UpdateProfile(System.Drawing.Image,System.String)">
            <summary>
            Update the display photo of current user.
            <list type="bullet">
            <item>GetProfile with scenario = "RoamingIdentityChanged"</item>
            <item>UpdateProfile - Update the profile resource with Flags = 1</item>
            <item>DeleteRelationships - delete the photo resource</item>
            <item>DeleteRelationships - delete the expression profile resource (profile resource)</item>
            <item>CreateDocument</item>
            <item>CreateRelationships</item>
            <item>UpdateProfile - Update the profile resource again with Flags = 0</item>
            </list>
            </summary>
            <param name="photo">New photo to display</param>
            <param name="photoName">The resourcename</param>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:MSNPSharp.IO.Service">
            <summary>
            Membership service
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.ProfileResource">
            <summary>
            Base class for profile resource
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.ProfileResource.DateModified">
            <summary>
            Last modify time of the resource
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.ProfileResource.ResourceID">
            <summary>
            Identifier of the resource
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.ProfilePhoto">
            <summary>
            Owner's photo resource in profile
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.OwnerProfile">
            <summary>
            Owner profile
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.OwnerProfile.HasExpressionProfile">
            <summary>
            Whether the profile owner is using hotmail or live account for msn login.
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.OwnerProfile.Photo">
            <summary>
            DisplayImage of owner.
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.OwnerProfile.DisplayName">
            <summary>
            DisplayName of owner
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.OwnerProfile.PersonalMessage">
            <summary>
            Personal description of owner.
            </summary>
        </member>
        <member name="T:MSNPSharp.ContactGroupEventArgs">
            <summary>
            Used as event argument when a contactgroup is affected.
            </summary>
        </member>
        <member name="M:MSNPSharp.ContactGroupEventArgs.#ctor(MSNPSharp.ContactGroup)">
            <summary>
            Constructor, mostly used internal by the library.
            </summary>
            <param name="contactGroup"></param>
        </member>
        <member name="P:MSNPSharp.ContactGroupEventArgs.ContactGroup">
            <summary>
            The affected contact group
            </summary>
        </member>
        <member name="T:MSNPSharp.ContactGroup">
            <summary>
            Defines a single contact group.
            </summary>
        </member>
        <member name="M:MSNPSharp.ContactGroup.#ctor(System.String,System.String,MSNPSharp.NSMessageHandler,System.Boolean)">
            <summary>
            Constructor, used internally by the library.
            </summary>
            <param name="name"></param>
            <param name="guid"></param>
            <param name="isFavorite"></param>
            <param name="nsMessageHandler"></param>
        </member>
        <member name="M:MSNPSharp.ContactGroup.SetName(System.String)">
            <summary>
            Used by nameserver.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MSNPSharp.ContactGroup.GetHashCode">
            <summary>
            Returns the ID field as hashcode. This is necessary to compare contactgroups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.ContactGroup.Equals(System.Object)">
            <summary>
            Equals two contacgroups based on their ID
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.ContactGroup.NSMessageHandler">
            <summary>
            The notification message handler which controls this contact object
            </summary>
        </member>
        <member name="P:MSNPSharp.ContactGroup.ClientData">
            <summary>
            The custom data specified by the client programmer
            </summary>
            <remarks>The application programmer can define it's own data here. It is not used by MSNPSharp.</remarks>
        </member>
        <member name="P:MSNPSharp.ContactGroup.Name">
            <summary>
            Name of the contactgroup
            </summary>
        </member>
        <member name="P:MSNPSharp.ContactGroup.Guid">
            <summary>
            The unique contactgroup ID assigned by MSN
            </summary>
        </member>
        <member name="T:MSNPSharp.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.ApplicationStrId">
            <summary>
              查找类似 Messenger Client 9.0 的本地化字符串。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.DeltasListVersion">
            <summary>
              查找类似 3.0.3.1717 的本地化字符串。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.WebServiceUserAgent">
            <summary>
              查找类似 MSN Explorer/9.0 (MSN 8.0; TmstmpExt) 的本地化字符串。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.WhatsupServiceAppID">
            <summary>
              查找类似 3B119D87-1D76-4474-91AD-0D7267E86D04 的本地化字符串。
            </summary>
        </member>
        <member name="P:MSNPSharp.Properties.Resources.XMLContactListVersion">
            <summary>
              查找类似 3.0.3.1717 的本地化字符串。
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PMessageSession">
            <summary>
            P2PMessageSession routes all messages in the p2p framework between the local client and a single remote client.
            </summary>
            <remarks>
            A single message session can hold multiple p2p transfer sessions. This for example occurs when a contact sends
            two files directly after each other in the same switchboard session.
            This class keeps track of the message identifiers, dispatches messages to registered message handlers and routes
            data messages to the correct <see cref="T:MSNPSharp.DataTransfer.P2PTransferSession"/> objects. Usually this class is a handler of a switchboard processor.
            A common handler for this class is <see cref="T:MSNPSharp.DataTransfer.MSNSLPHandler"/>.
            </remarks>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.preDCProcessor">
            <summary>
            This is the processor used before a direct connection. Usually a SB processor.
            It is a fallback variables in case a direct connection fails.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.transferSessions">
            <summary>
            A collection of all transfersessions
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.#ctor(MSNPSharp.P2PVersion)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.CleanUp">
            <summary>
            Removes references to handlers and the messageprocessor. Also closes running transfer sessions and pending processors establishing connections.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.AbortAllTransfers">
            <summary>
            Aborts all running transfer sessions.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.CorrectLocalIdentifier(System.Int32)">
            <summary>
            Corrects the local identifier with the specified correction.
            </summary>
            <param name="correction"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.IncreaseLocalIdentifier">
            <summary>
            The identifier of the local client, increases with each message send
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.AddTransferSession(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Adds the specified transfer session to the collection and sets the transfer session's message processor to be the
            message processor of the p2p message session. This is usally a SB message processor. 
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.RemoveTransferSession(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Removes the specified transfer session from the collection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.GetTransferSession(System.UInt32)">
            <summary>
            Returns the transfer session associated with the specified session identifier.
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.GetHandler(System.Type)">
            <summary>
            Searches through all handlers and returns the first object with the specified type, or null if not found.
            </summary>
            <param name="handlerType"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.WrapMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Wraps a P2PMessage in a MSGMessage and SBMessage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles P2PMessages. Other messages are ignored.
            All incoming messages are supposed to belong to this session.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.RegisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Registers a message handler. After registering the handler will receive incoming messages.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.UnregisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Unregisters a message handler. After registering the handler will no longer receive incoming messages.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.SendMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Sends incoming p2p messages to the remote contact.
            </summary>
            <remarks>
            Before the message is send a couple of things are checked. If there is no identifier available, the local identifier will be increased by one and set as the message identifier.
            Second, if the acknowledgement identifier is not set it will be set to a random value. After this the method will check for the total length of the message. If the total length
            is too large, the message will be splitted into multiple messages. The maximum size for p2p messages over a switchboard is 1202 bytes. The maximum size for p2p messages over a
            direct connection is 1352 bytes. As a result the length of the splitted messages will be 1202 or 1352 bytes or smaller, depending on the availability of a direct connection.
            
            If a direct connection is available the message is wrapped in a <see cref="T:MSNPSharp.DataTransfer.P2PDCMessage"/> object and send over the direct connection. Otherwise it will be send over a switchboard session.
            If there is no switchboard session available, or it has become invalid, a new switchboard session will be requested by asking this to the nameserver handler.
            Messages will be buffered until a switchboard session, or a direct connection, becomes available. Upon a new connection the buffered messages are directly send to the remote contact
            over the new connection.
            </remarks>
            <param name="message">The P2PMessage to send to the remote contact.</param>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.sendMessages">
            <summary>
            Keeps track of unsend messages
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.processorValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.InvalidateProcessor">
            <summary>
            Sets the processor as invalid, and requests the p2phandler for a new request.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.ValidateProcessor">
            <summary>
            Sets the processor as valid.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.OnProcessorInvalid">
            <summary>
            Fires the ProcessorInvalid event.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.BufferMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Buffer messages that can not be send because of an invalid message processor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.SendBuffer">
            <summary>
            Try to resend any messages that were stored in the buffer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.DCHandshakeAck">
            <summary>
            Tracked to know when an acknowledgement for the handshake is received.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PMessageSession.pendingProcessors">
            <summary>
            A list of all direct processors trying to establish a connection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.StopAllPendingProcessors">
            <summary>
            Disconnect all processors that are trying to establish a connection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.AddPendingProcessor(MSNPSharp.DataTransfer.P2PDirectProcessor)">
            <summary>
            Add the processor to the pending list.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.UsePendingProcessor(MSNPSharp.DataTransfer.P2PDirectProcessor)">
            <summary>
            Use the given processor as the direct connection processor. And disconnect all other pending processors.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.CreateDirectConnection(System.String,System.Int32)">
            <summary>
            Creates a direct connection with the remote client.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.ListenForDirectConnection(System.Net.IPAddress,System.Int32)">
            <summary>
            Setups a P2PDirectProcessor to listen for incoming connections.
            After a connection has been established the P2PDirectProcessor will become the main MessageProcessor to send messages.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.CloseDirectConnection">
            <summary>
            Closes the direct connection with the remote client, if available. A closing p2p message will be send first.
            The session will fallback to the previous (SB) message processor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.SendHandshakeMessage(MSNPSharp.Core.IMessageProcessor)">
            <summary>
            Sends the handshake message in a direct connection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.CleanUpDirectConnection">
            <summary>
            Sets the message processor back to the switchboard message processor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.OnDirectProcessorConnected(System.Object,System.EventArgs)">
            <summary>
            Sets the current message processor to the processor which has just connected succesfully.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.OnDirectProcessorDisconnected(System.Object,System.EventArgs)">
            <summary>
            Cleans up the direct connection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.OnDirectProcessorException(System.Object,MSNPSharp.ExceptionEventArgs)">
            <summary>
            Called when the direct processor could not connect. It will start the data transfer over the switchboard session.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PMessageSession.OnHandshakeCompleted(MSNPSharp.DataTransfer.P2PDirectProcessor)">
            <summary>
            Occurs when an acknowledgement to a send handshake has been received, or a handshake is received.
            This will start the data transfer, provided the local client is the sender.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.LocalBaseIdentifier">
            <summary>
            The base identifier of the local client
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.LocalIdentifier">
            <summary>
            The identifier of the local contact. This identifier is increased just before a message is send.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.RemoteBaseIdentifier">
            <summary>
            The base identifier of the remote client
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.RemoteIdentifier">
            <summary>
            The expected identifier of the remote client for the next message.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.LocalContact">
            <summary>
            The account of the local contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.RemoteContact">
            <summary>
            The account of the remote contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.MessageProcessor">
            <summary>
            The message processor that sends the P2P messages to the remote contact.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PMessageSession.ProcessorInvalid">
            <summary>
            Occurs when the processor has been marked as invalid. Due to connection error, or message processor being null.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.ProcessorValid">
            <summary>
            Indicates whether the processor is invalid
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PMessageSession.DirectConnectionEstablished">
            <summary>
            Occurs when a direct connection is succesfully established.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PMessageSession.DirectConnectionFailed">
            <summary>
            Occurs when a direct connection attempt has failed.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.HandshakeMessage">
            <summary>
            The handshake message to send to the receiving client when a direct connection has been established
            </summary>
            <remarks>
            If this property is set to null no handshake message is sent.
            </remarks>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.AutoHandshake">
            <summary>
            Defines whether a direct connection handshake is automatically send to the remote client, or replied with an acknowledgement.
            Setting this to true means the remote client will start the transfer immediately.
            Setting this to false means the client programmer must send a handhsake message and an acknowledgement message after which the transfer will begin.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.DirectConnectionAttempt">
            <summary>
            Defines whether an attempt has been made to create a direct connection
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PMessageSession.DirectConnected">
            <summary>
            Defines whether the message session runs over a direct session or is routed via the messaging server
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.SLPMessage">
            <summary>
            Base SLP message for SLPStatusMessage and SLPRequestMessage.
            Usually this message is contained in a P2P Message.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.SLPMessage.GetBytes">
            <summary>
            Builds the entire message and returns it as a byte array. Ready to be used in a P2P Message.
            This function adds the 0x00 at the end of the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.SLPMessage.ParseBytes(System.Byte[])">
            <summary>
            Parses an MSNSLP message and stores the values in the object's fields.
            </summary>
            <param name="data">The messagedata to parse</param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.SLPMessage.ToString">
            <summary>
            Textual presentation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.Encoding">
            <summary>
            Defaults to UTF8
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.FromMail">
            <summary>
            The contact that send the message.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.ToMail">
            <summary>
            The contact that receives the message.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.Branch">
            <summary>
            The current branch this message applies to.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.CSeq">
            <summary>
            The sequence count of this message.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.SLPMessage.BodyValues">
            <summary>
            Contains all name/value combinations of non-header fields in the message
            </summary>
        </member>
        <member name="T:MSNPSharp.UnauthorizedException">
            <summary>
            Indicates an authentication error with the Nexus service.
            </summary>
            <remarks>
            This exception is thrown when the Nexus service gives back a 401 Unauthorized header. This occurs most likely due to an invalid account or password.
            </remarks>
        </member>
        <member name="M:MSNPSharp.UnauthorizedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.UnauthorizedException.#ctor(System.String)">
            <summary>
            Specifies a general exception.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
        </member>
        <member name="M:MSNPSharp.UnauthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Specifies a general exception but which originates from another exception.
            </summary>
            <param name="message">A textual presentation of the exception message</param>
            <param name="innerException">The (inner)exception which caused this exception. For example a SocketException.</param>
        </member>
        <member name="M:MSNPSharp.UnauthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:MSNPSharp.SBEventArgs">
            <summary>
            Used when a new switchboard session is affected.
            </summary>
        </member>
        <member name="F:MSNPSharp.SBEventArgs.switchboard">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.SBEventArgs.#ctor(MSNPSharp.SBMessageHandler)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBEventArgs.Switchboard">
            <summary>
            The affected switchboard
            </summary>
        </member>
        <member name="T:MSNPSharp.SBCreatedEventArgs">
            <summary>
            Used when a new switchboard session is created.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBCreatedEventArgs.#ctor(MSNPSharp.SBMessageHandler,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.SBCreatedEventArgs.#ctor(MSNPSharp.SBMessageHandler,System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBCreatedEventArgs.Switchboard">
            <summary>
            The affected switchboard
            </summary>
        </member>
        <member name="P:MSNPSharp.SBCreatedEventArgs.Initiator">
            <summary>
            The object that requested the switchboard. Null if the switchboard session was initiated by a remote client.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBCreatedEventArgs.Account">
            <summary>
            The account of user that requested the switchboard.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBCreatedEventArgs.Name">
            <summary>
             The nick name of user that requested the switchboard.
            </summary>
        </member>
        <member name="P:MSNPSharp.SBCreatedEventArgs.Anonymous">
            <summary>
            Anonymous request, usually from webchat users.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.SocksHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.AddressToBytes(System.Int64)">
            <summary>
            Converts an IP address to an array of bytes.
            </summary>
            <param name="address">The IP address to convert.</param>
            <returns>An array of four bytes that represents the specified IP address.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has Occurred while authenticating, or <em>null</em> if no error Occurred.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.StorageService">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.GetProfile(MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.GetProfileAsync(MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.GetProfileAsync(MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateProfile(MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateProfileAsync(MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateProfileAsync(MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.FindDocuments(MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.FindDocumentsAsync(MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.FindDocumentsAsync(MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateProfile(MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateProfileAsync(MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateProfileAsync(MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.ShareItem(MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.ShareItemAsync(MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.ShareItemAsync(MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateDocument(MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateDocumentAsync(MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateDocumentAsync(MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateDocument(MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateDocumentAsync(MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateDocumentAsync(MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateRelationships(MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateRelationshipsAsync(MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateRelationshipsAsync(MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.DeleteRelationships(MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.DeleteRelationshipsAsync(MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.DeleteRelationshipsAsync(MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNStorageService.StorageService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.GetProfileCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateProfileCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.FindDocumentsCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateProfileCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.ShareItemCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.UpdateDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.CreateRelationshipsCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNStorageService.StorageService.DeleteRelationshipsCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.StorageApplicationHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageApplicationHeader.ApplicationID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageApplicationHeader.Scenario">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType.sourceHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsRequestType.targetHandles">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.Handle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Handle.Alias">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Handle.RelationshipName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Handle.ResourceID">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.Alias">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Alias.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Alias.NameSpace">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsRequestType.relationships">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.Relationship">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Relationship.SourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Relationship.SourceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Relationship.TargetID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Relationship.TargetType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.Relationship.RelationshipName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentResponseType.CreateDocumentResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType.parentHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType.document">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentRequestType.relationshipName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.documentBaseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.documentBaseType.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.documentBaseType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.documentBaseType.ItemType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.documentBaseType.DateModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.documentBaseType.DocumentStreams">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.DocumentStream">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.DocumentStreamName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.MimeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.Data">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.DataSize">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.PreAuthURL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.PreAuthURLPartner">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.DocumentStreamType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.WriteMode">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.StreamVersion">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.SHA1Hash">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DocumentStream.Genie">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.PhotoStream">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.PhotoStream.SizeX">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.PhotoStream.SizeXSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.PhotoStream.SizeY">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.PhotoStream.SizeYSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.Photo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentRequestType.document">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ShareItemResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ShareItemResponseType.ShareItemResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType.resourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ShareItemRequestType.displayName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestType.profile">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestTypeProfile">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateProfileRequestTypeProfile.ExpressionProfile">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.FreeText">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.PersonalStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.Flags">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.FlagsSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfile.RoleDefinitionName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsResultType.Document">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsResultTypeDocument">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsResultTypeDocument.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsResultTypeDocument.Name">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType.objectHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType.documentAttributes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType.documentFilter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType.documentSort">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestType.findContext">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentAttributes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentAttributes.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentAttributes.Name">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentFilter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentFilter.FilterAttributes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentSort">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeDocumentSort.SortBy">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeFindContext">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeFindContext.FindMethod">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsRequestTypeFindContext.ChunkSize">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType.profile">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestType.profileAttributesToDelete">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestTypeProfile">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestTypeProfile.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestTypeProfile.ExpressionProfile">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestTypeProfileAttributesToDelete">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileRequestTypeProfileAttributesToDelete.ExpressionProfileAttributes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.ResourceIDSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DateModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DateModifiedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DisplayNameSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DisplayNameLastModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.DisplayNameLastModifiedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.PersonalStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.PersonalStatusSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.PersonalStatusLastModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.PersonalStatusLastModifiedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.StaticUserTilePublicURL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.StaticUserTilePublicURLSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.Photo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.PhotoSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.Attachments">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.AttachmentsSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.Flag">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ExpressionProfileAttributesType.FlagSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultType.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultType.DateModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultType.ExpressionProfile">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.DateModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.Version">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.VersionSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.Flags">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.Photo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.Attachments">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.PersonalStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.PersonalStatusLastModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.DisplayNameLastModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResultTypeExpressionProfile.StaticUserTilePublicURL">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.profileAttributes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.profileAttributes.ResourceID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.profileAttributes.DateModified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.profileAttributes.ExpressionProfileAttributes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType.profileHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileRequestType.profileAttributes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.AffinityCacheHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.AffinityCacheHeader.CacheKey">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.StorageUserHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageUserHeader.Puid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageUserHeader.Cid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageUserHeader.TicketToken">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.StorageUserHeader.IsAdmin">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileResponse.GetProfileResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateProfileResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateProfileResponse.CreateProfileResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.GetProfileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.GetProfileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateProfileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.FindDocumentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateProfileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateProfileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateProfileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ShareItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.ShareItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.ShareItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateDocumentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.UpdateDocumentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.CreateRelationshipsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNStorageService.DeleteRelationshipsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PDCPool">
            <summary>
            A pool for P2P Direct-connection messages.
            </summary>
            <remarks>
            This message pool will read in the first 4 bytes for the length of the message. And after that the lenth is read and inserted in a buffer.
            </remarks>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCPool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCPool.BufferData(System.IO.BinaryReader)">
            <summary>
            Buffers incoming P2P direct connected messages.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDCPool.GetNextMessageData">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PDCPool.MessageAvailable">
            <summary>
            </summary>
        </member>
        <member name="T:MSNPSharp.Contact">
            <summary>
            User in roster list.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.UserTile">
            <summary>
            The display image url from the webside.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Guid">
            <summary>
            The Guid of contact, NOT CID.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.MachineGuid">
            <summary>
            EndPoint ID
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.CID">
            <summary>
            The contact id of contact, PassportMembers have CID only.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Mail">
            <summary>
            The email account of contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Name">
            <summary>
            The display name of contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.HasBlog">
            <summary>
            Indicates whether this contact has MSN Space.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Status">
            <summary>
            The online status of contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Online">
            <summary>
            Indicates whether the contact is online.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.ClientType">
            <summary>
            The type of contact's email account.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.ContactType">
            <summary>
            The role of contact in the addressbook.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Emoticons">
            <summary>
            Emoticons[sha]
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.AutoSubscribeToUpdates">
            <summary>
            Receive updated contact information automatically.
            <remarks>Contact details like address and phone numbers are automatically downloaded to your Address Book.</remarks>
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.IsMessengerUser">
            <summary>
            Indicates whether the contact is a mail contact or a messenger buddy.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.NickName">
            <summary>
            The name provide by the owner.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.OIMCount">
            <summary>
            The amount of OIMs sent in a session.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Blocked">
            <summary>
            Blocks/unblocks this contact. If blocked, will be placed in your BL and removed
            from your AL; otherwise, will be removed from your BL and placed in your AL.
            If this contact is not in ReverseList and you want to delete forever,
            set the <see cref="P:MSNPSharp.Contact.OnAllowedList"/> or <see cref="P:MSNPSharp.Contact.OnBlockedList"/> to false.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.OnAllowedList">
            <summary>
            Adds or removes this contact into/from your AL.
            If this contact is not in ReverseList and you want to delete forever,
            set this property to false.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.OnBlockedList">
            <summary>
            Adds or removes this contact into/from your BL.
            If this contact is not in ReverseList and you want to delete forever,
            set this property to false.
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.OnReverseList">
            <summary>
            Indicates whether the contact have you on their contact list. 
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.OnPendingList">
            <summary>
            Indicates whether the contact have you on their contact list and pending your approval. 
            </summary>
        </member>
        <member name="P:MSNPSharp.Contact.Lists">
            <summary>
            The msn lists this contact has.
            </summary>
        </member>
        <member name="M:MSNPSharp.Owner.SignoutFromEverywhere">
            <summary>
            Sign the owner out from every place.
            </summary>
        </member>
        <member name="M:MSNPSharp.Owner.SignoutFrom(System.Guid)">
            <summary>
            Sign the owner out from the specificed place.
            </summary>
            <param name="place">The place guid to be signed out</param>
        </member>
        <member name="M:MSNPSharp.Owner.UpdateProfile(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.IPAddress,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            This will update the profile of the Owner object. 
            </summary>
            <remarks>This method fires the <see cref="E:MSNPSharp.Owner.ProfileReceived"/> event.</remarks>
            <param name="loginTime"></param>
            <param name="emailEnabled"></param>
            <param name="memberIdHigh"></param>
            <param name="memberIdLowd"></param>
            <param name="preferredLanguage"></param>
            <param name="preferredMail"></param>
            <param name="country"></param>
            <param name="postalCode"></param>
            <param name="gender"></param>
            <param name="kid"></param>
            <param name="age"></param>
            <param name="birthday"></param>
            <param name="wallet"></param>
            <param name="sid"></param>
            <param name="kv"></param>
            <param name="mspAuth"></param>
            <param name="clientIP"></param>
            <param name="clientPort"></param>
            <param name="nick"></param>
            <param name="mpop"></param>
            <param name="routeInfo"></param>
        </member>
        <member name="M:MSNPSharp.Owner.OnProfileReceived(System.EventArgs)">
            <summary>
            Called when the server has send a profile description.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.Owner.OnPlacesChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:MSNPSharp.Owner.Places"/> (End Points) changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:MSNPSharp.Owner.ProfileReceived">
            <summary>
            Fired when owner profile received.
            </summary>
        </member>
        <member name="E:MSNPSharp.Owner.PlacesChanged">
            <summary>
            Fired when owner places changed.
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.EpName">
            <summary>
            This place's name
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.Places">
            <summary>
            The end points.
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.DisplayImage">
            <summary>
            Owner display image. The image is broadcasted automatically.
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.PersonalMessage">
            <summary>
            Personel message
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.PassportVerified">
            <summary>
            Whether this account is verified by email. If an account is not verified, "(email not verified)" will be displayed after a contact's displayname.
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.RouteInfo">
            <summary>
            Route address, used for PNRP??
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.MPOPEnable">
            <summary>
            Whether the contact list owner has Multiple Points of Presence Support (MPOP) that is owner connect from multiple places.
            </summary>
        </member>
        <member name="P:MSNPSharp.Owner.MPOPMode">
            <summary>
            Reaction when sign in at another place.
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.MclInfo.Refresh">
            <summary>
            Get whether the file was changed and refresh the <see cref="P:MSNPSharp.IO.MclInfo.LastChange"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.IO.MclInfo.File">
            <summary>
            Inner file
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.MclInfo.LastChange">
            <summary>
            Last written date
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.MclSerialization">
            <summary>
            Mcl serialization to load/save contact list files.
            A mcl file can be serialized as both compressed and encrypted formats.
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclSerialization.None">
            <summary>
            No serialization, use plain text.
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclSerialization.Compression">
            <summary>
            Use compression.
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclSerialization.Cryptography">
            <summary>
            Use cryptography.
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.MclFile">
            <summary>
            File class used to save userdata.
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclFile.MclBytes">
            <summary>
            Signature for compressed file - mcl.
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclFile.MpwBytes">
            <summary>
            Signature for encrypted file - mpw, Mr Pang Wu :)
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclFile.McpBytes">
            <summary>
            Signature for compressed+encrypted file - mcp.
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.#ctor(System.String,System.Boolean,System.IO.FileAccess)">
            <summary>
            Opens filename and fills the <see cref="P:MSNPSharp.IO.MclFile.Content"/> with uncompressed data if file is opened for reading.
            </summary>
            <param name="filename">Name of file</param>
            <param name="nocompress">Use of compression when SAVING file.</param>
            <param name="access">The <see cref="P:MSNPSharp.IO.MclFile.Content"/> is filled if the file is opened for reading</param>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.SaveAndHide(System.String)">
            <summary>
            Save the file and set its hidden attribute to true
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.SaveAndHide">
            <summary>
            Save the file and set its hidden attribute to true
            </summary>
        </member>
        <member name="F:MSNPSharp.IO.MclFile.IV">
            <summary>
            Public key
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.FillFileStruct(System.Byte[])">
            <summary>
            Compress/Encrypt the data.
            </summary>
            <param name="xml">Xml data</param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.GetStruct">
            <summary>
            Decompress/Decyrpt the file if the serialization type is not XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.IO.MclFile.Open(System.String,System.IO.FileAccess,MSNPSharp.IO.MclSerialization,System.String,System.Boolean)">
            <summary>
            Get the file from disk or from the storage cache.
            </summary>
            <param name="filePath">Full file path</param>
            <param name="access">If the file is opened for reading, file content is loaded</param>
            <param name="st">Serialization type for SAVING</param>
            <param name="password">File password</param>
            <param name="useCache"></param>
            <returns>Msnpsharp contact list file</returns>
            <remarks>This method is thread safe</remarks>
        </member>
        <member name="P:MSNPSharp.IO.MclFile.FileName">
            <summary>
            Name of file
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.MclFile.Content">
            <summary>
            XML data
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.MclFile.NoCompression">
            <summary>
            Don't use compression when SAVING.
            </summary>
        </member>
        <member name="T:MSNPSharp.IO.DeltasList">
            <summary>
            Storage class for deltas request
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.DeltasList.Empty">
            <summary>
            Empty all of the lists
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.DeltasList.Truncate">
            <summary>
            Truncate file. This is useful after calling of Addressbook.Save
            </summary>
        </member>
        <member name="M:MSNPSharp.IO.DeltasList.Save(System.String)">
            <summary>
            Save the <see cref="T:MSNPSharp.IO.DeltasList"/> into a specified file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:MSNPSharp.IO.DeltasList.CacheKeys">
            <summary>
            CacheKeys for webservices.
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.DeltasList.PreferredHosts">
            <summary>
            Preferred hosts for different methods.
            </summary>
        </member>
        <member name="P:MSNPSharp.IO.DeltasList.Profile">
            <summary>
            Profile of current user.
            </summary>
        </member>
        <member name="T:MSNPSharp.EmoticonMessage">
            <summary>
            A message that defines a list of emoticons used in the next textmessage.
            </summary>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.#ctor(MSNPSharp.Emoticon,MSNPSharp.EmoticonType)">
            <summary>
            Constructor with a single emoticon supplied.
            </summary>
            <param name="emoticon"></param>
            <param name="type"></param>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.#ctor(System.Collections.Generic.List{MSNPSharp.Emoticon},MSNPSharp.EmoticonType)">
            <summary>
            Constructor with multiple emoticons supplied.
            </summary>
            <param name="emoticons"></param>
            <param name="type"></param>
        </member>
        <member name="F:MSNPSharp.EmoticonMessage.emoticons">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.ParseBytes(System.Byte[])">
            <summary>
            Sets the Emoticon property.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.PrepareMessage">
            <summary>
            Sets the mime-headers in the <see cref="T:MSNPSharp.Core.MSGMessage"/> object. This is the 'parent' message object.
            </summary>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.GetBytes">
            <summary>
            Gets the header with the body appended as a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.EmoticonMessage.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.EmoticonMessage.EmoticonType">
            <summary>
            Type of emoticons.
            </summary>
        </member>
        <member name="P:MSNPSharp.EmoticonMessage.Emoticons">
            <summary>
            The emoticon that is defined in this message
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHeader.HeaderLength">
            <summary>
            Header length
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHeader.Identifier">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHeader.MessageSize">
            <summary>
            Payload length
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHeader.TotalSize">
            <summary>
            Total size
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHeader.AckIdentifier">
            <summary>
            Acknowledgement identifier
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.SessionId">
            <summary>
            The session identifier field. Bytes 0-3 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.Identifier">
            <summary>
            The identifier of this message. Bytes 5-8 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.Offset">
            <summary>
            The offset in bytes from the begin of the total message. Bytes 9-16 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.TotalSize">
            <summary>
            Total message length in bytes.  Bytes 17-24 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.MessageSize">
            <summary>
            Message length in bytes of the current message. Bytes 25-28 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.Flags">
            <summary>
            Flag parameter. Bytes 29-32 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.AckSessionId">
            <summary>
            Acknowledge session identifier. Acknowledgement messages respond with this number in their acknowledge identfier. Bytes 33-36 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.AckIdentifier">
            <summary>
            Acknowledge identifier. Set when the message is an acknowledgement to a received message. Bytes 37-40 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv1Header.AckTotalSize">
            <summary>
            Acknowledged total message length. Set when the message is an acknowledgement to a received message. Bytes 41-48 in the binary header.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2Pv2Header.ParseHeader(System.Byte[])">
            <summary>
            Parse header
            </summary>
            <param name="data"></param>
            <returns>Header length</returns>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.HeaderLength">
            <summary>
            Header length (dynamic).  Byte 0 in the binary header.
            </summary>
            <remarks>Min: 8, Max: 252. Padding: 4</remarks>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.DataPacketHeaderLength">
            <summary>
            The header length for data package.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.HeaderTLVs">
            <summary>
            Type, Length, Values. Max length (t+l+v): 244. Header length - 8 = TLVs length
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.OperationCode">
            <summary>
            Operation code. Byte 1 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.MessageSize">
            <summary>
            Payload size.  Bytes 2-4 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.Identifier">
            <summary>
            Message identifier. Bytes 5-8 in the binary header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2Pv2Header.AckIdentifier">
            <summary>
            The Identifier we acknowledge to.
            </summary>
        </member>
        <member name="T:MSNPSharp.TextMessage">
            <summary>
            Represents a single plain textual message send over a switchboard (conversation).
            </summary>
            <remarks>
            These message objects are dispatched by events. 
            </remarks>
        </member>
        <member name="F:MSNPSharp.TextMessage.text">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.font">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.color">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.decorations">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.charSet">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.rightToLeft">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessage.customNickname">
            <summary>
            The (optional) custom nickname of this message
            </summary>
        </member>
        <member name="M:MSNPSharp.TextMessage.CreateFromMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Parses the header in the parent message and sets the style properties.
            </summary>
            <param name="containerMessage"></param>
        </member>
        <member name="M:MSNPSharp.TextMessage.ParseBytes(System.Byte[])">
            <summary>
            Sets the Text property.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MSNPSharp.TextMessage.PrepareMessage">
            <summary>
            Sets the mime-headers in the <see cref="T:MSNPSharp.Core.MSGMessage"/> object. This is the 'parent' message object.
            </summary>
        </member>
        <member name="M:MSNPSharp.TextMessage.GetStyleString">
            <summary>
            Gets the style string specifying charset, font, etc. This is used in the MIME header send with a switchboard message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.TextMessage.GetBytes">
            <summary>
            Gets the header with the body appended as a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.TextMessage.ParseHeader(MSNPSharp.StrDictionary)">
            <summary>
            Parses the raw header to set the member variables
            </summary>
        </member>
        <member name="M:MSNPSharp.TextMessage.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.TextMessage.ToString">
            <summary>
            Textual presentation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.TextMessage.#ctor(System.String)">
            <summary>
            Creates a TextMessage with the specified text as message.
            </summary>
            <remarks>
            This leaves all style attributes to their default values.
            </remarks>
            <param name="message"></param>
        </member>
        <member name="P:MSNPSharp.TextMessage.Text">
            <summary>
            The body of the message
            </summary>
        </member>
        <member name="P:MSNPSharp.TextMessage.Font">
            <summary>
            The font used in the message. Default is 'Arial'
            </summary>
        </member>
        <member name="P:MSNPSharp.TextMessage.Color">
            <summary>
            The color used in the message. Default is black.
            </summary>
        </member>
        <member name="P:MSNPSharp.TextMessage.Decorations">
            <summary>
            The decorations used in the message.
            </summary>
            <remarks>
            When there are multiple decorations used the values are bitwise OR'ed!
            Example to check for bold: 
            <code>if((Decorations &amp; MSNTextDecorations.Bold) > 0) ....</code>
            If you want to use multiple decorations in a new message:
            <code>textMessage.Decorations = TextDecorations.Underline | TextDecorations.Italic</code>
            </remarks>		
        </member>
        <member name="P:MSNPSharp.TextMessage.CharSet">
            <summary>
            The charset used in the message. Default is the ANSI charset.
            </summary>
        </member>
        <member name="P:MSNPSharp.TextMessage.RightToLeft">
            <summary>
            Text is read right-to-left
            </summary>
        </member>
        <member name="P:MSNPSharp.TextMessage.CustomNickname">
            <summary>
            The (optional) custom nickname of this message
            </summary>
        </member>
        <member name="P:MSNPSharp.MSNTicket.CacheKeys">
            <summary>
            CacheKeys for webservices.
            </summary>
        </member>
        <member name="T:MSNPSharp.MBI">
            <summary>
            MBI encrypt algorithm class
            </summary>
        </member>
        <member name="M:MSNPSharp.MBI.Encrypt(System.String,System.String)">
            <summary>
            Get the encrypted string
            </summary>
            <param name="key">The BinarySecret</param>
            <param name="nonce">Nonce get from server</param>
            <returns></returns>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Init(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PSessionAffectedEventArgs">
            <summary>
            Used in events where a P2PMessageSession object is created, or in another way affected.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PSessionAffectedEventArgs.session">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PSessionAffectedEventArgs.#ctor(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            Constructor.
            </summary>
            <param name="affectedSession"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PSessionAffectedEventArgs.Session">
            <summary>
            The affected session
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PHandler">
            <summary>
            Handles incoming P2P messages from the switchboardserver.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.#ctor(MSNPSharp.NSMessageHandler)">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.Clear">
            <summary>
            Aborts and cleans up all running messagesessions and their transfersessions.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.OnSessionCreated(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            Fires the SessionCreated event.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.OnSessionClosed(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            Fires the SessionClosed event.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.GetSession(MSNPSharp.Contact,MSNPSharp.Contact)">
            <summary>
            Gets a reference to a p2p message session with the specified remote contact.
            In case a session does not exist a new session will be created and returned.
            </summary>
            <param name="localContact"></param>
            <param name="remoteContact"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.CreateSessionFromLocal(MSNPSharp.Contact,MSNPSharp.Contact)">
            <summary>
            Creates a p2p session. The session is at the moment of return pure fictive; no actual messages
            have been sent to the remote client. The session will use the P2PHandler's messageprocessor as it's default messageprocessor.
            </summary>
            <param name="localContact"></param>
            <param name="remoteContact"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.GetSwitchboardSession(MSNPSharp.Contact)">
            <summary>
            Gets a switchboard session with the specified remote contact present in the session. Null is returned if no such session is found.
            </summary>
            <param name="remoteContact"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.GetSessionFromRemote(MSNPSharp.Contact)">
            <summary>
            Gets the p2p message session for which the remote identifier equals the identifier passed as a parameter.
            This is typically called when an incoming message is processed.
            </summary>
            <param name="remoteContact">The identifier used by the remote client</param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.CreateSessionFromRemote(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Creates a session based on a message received from the remote client.
            </summary>
            <param name="receivedMessage"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.SetSessionIdentifiersAfterAck(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            After the first acknowledgement we must set the identifier of the remote client.
            </summary>
            <param name="receivedMessage"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.GetSessionFromLocal(System.UInt32)">
            <summary>
            Gets the p2p message session for which the local identifier equals the identifier passed as a parameter.
            This is typically called when a message is created.
            </summary>
            <param name="identifier">The identifier used by the remote client</param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles incoming sb messages. Other messages are ignored.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.RequestSwitchboard(MSNPSharp.Contact)">
            <summary>
            Requests a new switchboard processor.
            </summary>
            <remarks>
            This is done by delegating the request to the nameserver handler. The supplied contact is also direct invited to the newly created switchboard session.
            </remarks>
            <param name="remoteContact"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.AddSwitchboardSession(MSNPSharp.SBMessageHandler)">
            <summary>
            Add a switchboard handler to the list of switchboard sessions to send messages to.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.RemoveSwitchboardSession(MSNPSharp.SBMessageHandler)">
            <summary>
            Removes a switchboard handler from the list of switchboard sessions to send messages to.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.nsMessageHandler_SBCreated(System.Object,MSNPSharp.SBCreatedEventArgs)">
            <summary>
            Registers events of the new switchboard in order to act on these.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.RemoveSessionProcessor(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            Removes the messageprocessor from the specified messagesession, because it is invalid.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.AddSessionProcessor(MSNPSharp.DataTransfer.P2PMessageSession,MSNPSharp.Core.IMessageProcessor)">
            <summary>
            Sets the specified messageprocessor as the default messageprocessor for the message session.
            </summary>
            <param name="session"></param>
            <param name="processor"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.Switchboard_ContactJoined(System.Object,MSNPSharp.ContactEventArgs)">
            <summary>
            Updates the internal switchboard collection to reflect the changes.
            </summary>
            <remarks>
            Conversations with more than one contact are not found suitable for p2p transfers.
            If multiple contacts are present, then any message sessions associated with the switchboard are unplugged.
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.Switchboard_ContactLeft(System.Object,MSNPSharp.ContactEventArgs)">
            <summary>
            Removes the switchboard processor from the corresponding p2p message session, if necessary.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.nsMessageHandler_ContactOffline(System.Object,MSNPSharp.ContactEventArgs)">
            <summary>
            Cleans up p2p resources associated with the offline contact.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.CloseMessageSession(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            Closes a message session.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.session_ProcessorInvalid(System.Object,System.EventArgs)">
            <summary>
            Requests a new switchboard session.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PHandler.Switchboard_SessionClosed(System.Object,System.EventArgs)">
            <summary>
            Removes the session from the list.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHandler.NSMessageHandler">
            <summary>
            The nameserver handler. This object is used to request new switchboard sessions.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHandler.MessageProcessor">
            <summary>
            The message processor that will send the created P2P messages to the remote contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHandler.MessageSessions">
            <summary>
            A list of all current p2p message sessions. Multiple threads can access this resource so make sure to lock this.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PHandler.SwitchboardSessions">
            <summary>
            A collection of all available switchboard sessions
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PHandler.SessionCreated">
            <summary>
            Occurs when a P2P session is created.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PHandler.SessionClosed">
            <summary>
            Occurs when a P2P session is closed.
            </summary>
        </member>
        <member name="T:MSNPSharp.ConversationCreatedEventArgs">
            <summary>
            Used when a new switchboard session is created.
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationCreatedEventArgs._conversation">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationCreatedEventArgs._initiator">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.ConversationCreatedEventArgs.#ctor(MSNPSharp.Conversation,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MSNPSharp.ConversationCreatedEventArgs.Conversation">
            <summary>
            The affected conversation
            </summary>
        </member>
        <member name="P:MSNPSharp.ConversationCreatedEventArgs.Initiator">
            <summary>
            The object that requested the switchboard. Null if the conversation was initiated by a remote client.
            </summary>
        </member>
        <member name="T:MSNPSharp.Messenger">
            <summary>
            Provides an easy interface for the client programmer.
            </summary>
            <remarks>
            Messenger is an important class for the client programmer. It provides an
            easy interface to communicate with the network. Messenger is a facade which hides all
            lower abstractions like message processors, protocol handlers, etc.
            Messenger passes through events from underlying objects. This way the client programmer
            can connect eventhandlers just once.
            </remarks>
        </member>
        <member name="M:MSNPSharp.Messenger.#ctor">
            <summary>
            Basic constructor to instantiate a Messenger object.
            </summary>
        </member>
        <member name="M:MSNPSharp.Messenger.Connect">
            <summary>
            Connect to the messenger network.
            </summary>
        </member>
        <member name="M:MSNPSharp.Messenger.Disconnect">
            <summary>
            Disconnect from the messenger network.
            </summary>
        </member>
        <member name="M:MSNPSharp.Messenger.CreateConversation">
            <summary>
            Creates a conversation.
            </summary>
            <remarks>
            This method will fire the <see cref="E:MSNPSharp.Messenger.ConversationCreated"/> event. The initiator object of the created switchboard will be <b>this</b> messenger object.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Messenger.GetMSNSLPHandler(MSNPSharp.Contact)">
            <summary>
            Returns a MSNSLPHandler, associated with a P2P session. The returned object can be used to send or receive invitations from the remote contact.
            </summary>
            <param name="remoteContact"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Messenger.OnConversationCreated(MSNPSharp.Conversation,System.Object)">
            <summary>
            Fires the ConversationCreated event.
            </summary>
            <param name="conversation"></param>
            <param name="initiator"></param>
        </member>
        <member name="M:MSNPSharp.Messenger.CreateMSNSLPHandler(MSNPSharp.P2PVersion)">
            <summary>
            Creates the object and sets the external end point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Messenger.GetMSNSLPHandler(MSNPSharp.DataTransfer.P2PMessageSession)">
            <summary>
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="E:MSNPSharp.Messenger.ConversationCreated">
            <summary>
            Occurs when a new conversation is created. Either by a local or remote invitation.
            </summary>
            <remarks>
            You can check the initiator object in the event arguments to see which party initiated the conversation.
            This event is called after the messenger server has created a switchboard handler, so there is
            always a valid messageprocessor.
            </remarks>
        </member>
        <member name="E:MSNPSharp.Messenger.TransferInvitationReceived">
            <summary>
            Occurs when a remote client has send an invitation for a filetransfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.Messenger.NameserverProcessor">
            <summary>
            The message processor that is used to send and receive nameserver messages.
            </summary>
            <remarks>
            This processor is mainly used by the nameserver handler.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.ConnectivitySettings">
            <summary>
            Specifies the connection capabilities of the local machine.
            </summary>
            <remarks>
            Use this property to set specific connectivity settings like proxy servers and custom messenger servers.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.Credentials">
            <summary>
            The credentials which identify the messenger account and the client authentication.
            </summary>
            <remarks>
            This property must be set before logging in the messenger service. <b>Both</b> the account properties and
            the client identifier codes must be set. The first, the account, specifies the account which represents the local user,
            for example 'account@hotmail.com'. The second, the client codes, specifies how this client will authenticate itself
            against the messenger server. See <see cref="P:MSNPSharp.Messenger.Credentials"/> for more information about this.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.Nameserver">
            <summary>
            The message handler that is used to handle incoming nameserver messages.
            </summary>
        </member>
        <member name="P:MSNPSharp.Messenger.Connected">
            <summary>
            Returns whether there is a connection with the messenger server.
            </summary>
        </member>
        <member name="P:MSNPSharp.Messenger.ContactList">
            <summary>
            A list of all contacts.
            </summary>
            <remarks>
            This property is a reference to the ContactList object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.ContactGroups">
            <summary>
            A list of all contactgroups.
            </summary>
            <remarks>
            This property is a reference to the ContactGroups object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.OIMService">
            <summary>
            Offline message service.
            </summary>
            <remarks>
            This property is a reference to the OIMService object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.StorageService">
            <summary>
            Storage service to get/update display name, personal status, display picture etc.
            </summary>
            <remarks>
            This property is a reference to the StorageService object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.ContactService">
            <summary>
            Contact service.
            </summary>
            <remarks>
            This property is a reference to the ContactService object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.Owner">
            <summary>
            The local user logged into the network.
            </summary>
            <remarks>
            This property is a reference to the Owner object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="P:MSNPSharp.Messenger.P2PHandler">
            <summary>
            The handler that handles all incoming P2P framework messages.
            </summary>
            <remarks>
            This property is a reference to the P2PHandler object in the <see cref="P:MSNPSharp.Messenger.Nameserver"/> property. This property is added here for convenient access.
            </remarks>
        </member>
        <member name="T:MSNPSharp.MsnProtocol">
            <summary>
            Msn protocol speaking
            </summary>
        </member>
        <member name="T:MSNPSharp.ProxyType">
            <summary>
            Specifies the type of proxy servers that can be used
            </summary>
        </member>
        <member name="F:MSNPSharp.ProxyType.None">
            <summary>No proxy server.</summary>
        </member>
        <member name="F:MSNPSharp.ProxyType.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:MSNPSharp.ProxyType.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:MSNPSharp.NotificationType">
            <summary>
            Specifieds the type of a notification message.
            </summary>
        </member>
        <member name="F:MSNPSharp.NotificationType.Mobile">
            <summary>
            A message a remote contact send from a mobile device.
            </summary>
        </member>
        <member name="F:MSNPSharp.NotificationType.Calendar">
            <summary>
            A calendar reminder.
            </summary>
        </member>
        <member name="F:MSNPSharp.NotificationType.Alert">
            <summary>
            An alert notification.
            </summary>
        </member>
        <member name="T:MSNPSharp.PresenceStatus">
            <summary>
            Specifies the online presence state
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Unknown">
            <summary>
            Unknown presence state.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Offline">
            <summary>
            Contact is offline (or a remote contact is hidden).
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Hidden">
            <summary>
            The client owner is hidden.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Online">
            <summary>
            The contact is online.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Away">
            <summary>
            The contact is away.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Busy">
            <summary>
            The contact is busy.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.BRB">
            <summary>
            The contact will be right back.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Lunch">
            <summary>
            The contact is out to lunch.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Phone">
            <summary>
            The contact is on the phone.
            </summary>
        </member>
        <member name="F:MSNPSharp.PresenceStatus.Idle">
            <summary>
            The contact is idle.
            </summary>
        </member>
        <member name="T:MSNPSharp.SignedOffReason">
            <summary>
            Defines why a user has (been) signed off.
            </summary>
            <remarks>
            <b>OtherClient</b> is used when this account has signed in from another location. <b>ServerDown</b> is used when the msn server is going down.
            </remarks>
        </member>
        <member name="F:MSNPSharp.SignedOffReason.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:MSNPSharp.SignedOffReason.OtherClient">
            <summary>
            User logged in on the other client.
            </summary>
        </member>
        <member name="F:MSNPSharp.SignedOffReason.ServerDown">
            <summary>
            Server went down.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNLists">
            <summary>
            One of the four lists used in the messenger network
            </summary>
            <remarks>
            <list type="bullet">
            <item>AllowedList - all contacts who are allowed to see <i>your</i> status</item>
            <item>ReverseList - all contacts who have <i>you</i> on <i>their</i> contactlist</item>
            <item>ForwardList - all contacts in your contactlist. You can send messages to those people</item>
            <item>BlockedList - all contacts who you have blocked</item>
            </list>
            </remarks>
        </member>
        <member name="F:MSNPSharp.MSNLists.None">
            <summary>
            No msn list
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNLists.ForwardList">
            <summary>
            All contacts in your contactlist.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNLists.AllowedList">
            <summary>
            All contacts who are allowed to see your status.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNLists.BlockedList">
            <summary>
            All contacts who you have blocked.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNLists.ReverseList">
            <summary>
            All contacts who have you on their contactlist.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNLists.PendingList">
            <summary>
            All pending (for approval) contacts.
            </summary>
        </member>
        <member name="T:MSNPSharp.PrivacyMode">
            <summary>
            Defines the privacy mode of the owner of the contactlist
            <list type="bullet">
            <item>AllExceptBlocked - Allow all contacts to send you messages except those on your blocked list</item>
            <item>NoneButAllowed - Reject all messages except those from people on your allow list</item></list>
            </summary>
        </member>
        <member name="F:MSNPSharp.PrivacyMode.Unknown">
            <summary>
            Unknown privacy mode.
            </summary>
        </member>
        <member name="F:MSNPSharp.PrivacyMode.AllExceptBlocked">
            <summary>
            Allow all contacts to send you messages except those on your blocked list.
            </summary>
        </member>
        <member name="F:MSNPSharp.PrivacyMode.NoneButAllowed">
            <summary>
            Reject all messages except those from people on your allow list.
            </summary>
        </member>
        <member name="T:MSNPSharp.NotifyPrivacy">
            <summary>
            Defines the way MSN handles with new contacts
            <list type="bullet">
            <item>PromptOnAdd - Notify the clientprogram when a contact adds you and let the program handle the response itself</item>
            <item>AutomaticAdd - When someone adds you MSN will automatically add them on your list</item>
            </list>
            </summary>
        </member>
        <member name="F:MSNPSharp.NotifyPrivacy.Unknown">
            <summary>
            Unknown notify privacy.
            </summary>
        </member>
        <member name="F:MSNPSharp.NotifyPrivacy.PromptOnAdd">
            <summary>
            Notify the clientprogram when a contact adds you and let the program handle the response itself.
            </summary>
        </member>
        <member name="F:MSNPSharp.NotifyPrivacy.AutomaticAdd">
            <summary>
            When someone adds you MSN will automatically add them on your list.
            </summary>
        </member>
        <member name="T:MSNPSharp.RoamLiveProperty">
            <summary>
            Use the same display picture and personal message wherever I sign in.
            </summary>
        </member>
        <member name="F:MSNPSharp.RoamLiveProperty.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:MSNPSharp.RoamLiveProperty.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:MSNPSharp.RoamLiveProperty.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:MSNPSharp.MPOP">
            <summary>
            Whether the contact list owner has Multiple Points of Presence Support (MPOP) that is owner connect from multiple places.
            </summary>
        </member>
        <member name="F:MSNPSharp.MPOP.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:MSNPSharp.MPOP.AutoLogoff">
            <summary>
            When the same user sign in at another place, sign the owner out.
            </summary>
        </member>
        <member name="F:MSNPSharp.MPOP.KeepOnline">
            <summary>
            When the same user sign in at another place, keep the owner sign in.
            </summary>
        </member>
        <member name="T:MSNPSharp.ClientCapacities">
            <summary>
            The functions a (remote) client supports.
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanDirectIM">
            <summary>
            Activity support.
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC1">
            <summary>
            MSN 6.0
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC2">
            <summary>
            MSN 6.1
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC3">
            <summary>
            MSN 6.2
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC4">
            <summary>
            MSN 7.0
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC5">
            <summary>
            MSN 7.5
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC6">
            <summary>
            MSN 8.0
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC7">
            <summary>
            MSN 8.1
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC8">
            <summary>
            MSN 8.5 (MSNP15)
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC9">
            <summary>
            MSN 9.0 (MSNP16)
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNC10">
            <summary>
            MSN 12.0 (MSNP18)
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientCapacities.CanHandleMSNCMask">
            <summary>
            Mask for MSNC
            </summary>
        </member>
        <member name="T:MSNPSharp.TextDecorations">
            <summary>
            The text decorations messenger sends with a message
            </summary>
        </member>
        <member name="F:MSNPSharp.TextDecorations.None">
            <summary>
            No decoration.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextDecorations.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextDecorations.Italic">
            <summary>
            Italic.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextDecorations.Underline">
            <summary>
            Underline.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextDecorations.Strike">
            <summary>
            Strike-trough.
            </summary>
        </member>
        <member name="T:MSNPSharp.MediaType">
            <summary>
            Types of media used on UBX command
            </summary>
        </member>
        <member name="T:MSNPSharp.MessageCharSet">
            <summary>
            A charset that can be used in a message.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Ansi">
            <summary>
            ANSI
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Default">
            <summary>
            Default charset.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Symbol">
            <summary>
            Symbol.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Mac">
            <summary>
            Mac.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Shiftjis">
            <summary>
            Shiftjis.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Hangeul">
            <summary>
            Hangeul.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Johab">
            <summary>
            Johab.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.GB2312">
            <summary>
            GB2312.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.ChineseBig5">
            <summary>
            Chines Big 5.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Greek">
            <summary>
            Greek.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Turkish">
            <summary>
            Turkish.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Vietnamese">
            <summary>
            Vietnamese.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Hebrew">
            <summary>
            Hebrew.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Arabic">
            <summary>
            Arabic.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Baltic">
            <summary>
            Baltic.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Russian">
            <summary>
            Russian.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Thai">
            <summary>
            Thai.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.EastEurope">
            <summary>
            Eastern Europe.
            </summary>
        </member>
        <member name="F:MSNPSharp.MessageCharSet.Oem">
            <summary>
            OEM.
            </summary>
        </member>
        <member name="T:MSNPSharp.ClientType">
            <summary>
            Email account type.
            <remarks>If you add any new value here, remember to change the <see cref="M:MSNPSharp.ContactList.GetContact(System.String)"/> method.</remarks>
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.None">
            <summary>
            No client
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.PassportMember">
            <summary>
            Passport member
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.LCS">
            <summary>
            Live Communication Server
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.PhoneMember">
            <summary>
            Phone member
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.CircleMember">
            <summary>
            MSN group
            </summary>
        </member>
        <member name="F:MSNPSharp.ClientType.EmailMember">
            <summary>
            Email member, currently Yahoo!
            </summary>
        </member>
        <member name="T:MSNPSharp.ProfileType">
            <summary>
            Type of profiles that store in msn space.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNError">
            <summary>
            Specifies an error a MSN Server can send.
            </summary>	
        </member>
        <member name="F:MSNPSharp.MSNError.None">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.SyntaxError">
            <summary>
            Syntax error.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidParameter">
            <summary>
            Invalid parameter.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidContactNetwork">
            <summary>
            Invalid contact network
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidUser">
            <summary>
            Invalid user.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.MissingDomain">
            <summary>
            Missing domain.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.AlreadyLoggedIn">
            <summary>
            The user is already logged in.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidUsername">
            <summary>
            The username specified is invalid.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidFullUsername">
            <summary>
            The full username specified is invalid.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.UserListFull">
            <summary>
            User's contact list is full.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidNameRequest">
            <summary>
            Invalid Name Request.
            </summary>		
        </member>
        <member name="F:MSNPSharp.MSNError.UserAlreadyThere">
            <summary>
            User is already specified.
            </summary>		
        </member>
        <member name="F:MSNPSharp.MSNError.UserAlreadyOnList">
            <summary>
            User is already on the list.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.UserNotOnline">
            <summary>
            User is not online.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.AlreadyInMode">
            <summary>
            Already in stated mode.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.UserInOppositeList">
            <summary>
            User is in opposite (conflicting) list.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.TooManyGroups">
            <summary>
            Too Many Groups.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidGroup">
            <summary>
            Invalid Group.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.PrincipalNotInGroup">
            <summary>
            Principal not in group.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.GroupNotEmpty">
            <summary>
            Principal not in group.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ContactGroupNameExists">
            <summary>
            Contactgroup name already exists.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.GroupNameTooLong">
            <summary>
            Group name too long.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.CannotRemoveGroupZero">
            <summary>
            Cannot remove group zero
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.EmptyDomainElement">
            <summary>
            If <d/> domain element specified in <ml/> mail list, at least one <c/> contact  must be exists
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidMembershipForADLRML">
            <summary>
            ADL/RML commands accept FL(1)/AL(2)/BL(4) BUT RL(8)/PL(16).
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.SwitchboardFailed">
            <summary>
            Switchboard request failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.SwitchboardTransferFailed">
            <summary>
            Switchboard transfer failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.P2PError">
            <summary>
            P2P Error.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.MissingRequiredField">
            <summary>
            Required field is missing.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NotLoggedIn">
            <summary>
            User is not logged in.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ErrorAccessingContactList">
            <summary>
            Error accessing contact list.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ErrorAccessingContactListRem">
            <summary>
            Error accessing contact list.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InvalidAccountPermissions">
            <summary>
            Invalid account permissions.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.InternalServerError">
            <summary>
            Internal server error.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.DatabaseServerError">
            <summary>
            Databaseserver error.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.CommandDisabled">
            <summary>
            Command Disabled.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.UpsFailure">
            <summary>
            Ups failure
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.FileOperationFailed">
            <summary>
            File operation failed. 
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.Banned">
            <summary>
            Banned. 
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.MemoryAllocationFailed">
            <summary>
            Memory allocation failure.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ChallengeResponseFailed">
            <summary>
            Challenge response failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ServerIsBusy">
            <summary>
            Server is busy.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ServerIsUnavailable">
            <summary>
            Server is unavailable.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NameServerDown">
            <summary>
            Nameserver is down.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.DatabaseConnectionFailed">
            <summary>
            Database connection failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ServerGoingDown">
            <summary>
            Server is going down.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ServerUnavailable">
            <summary>
            Server is unavailable.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.CouldNotCreateConnection">
            <summary>
            Connection creation failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.BadCVRParameters">
            <summary>
            Bad CVR parameters sent.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.WriteIsBlocking">
            <summary>
            Write is blocking.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.SessionIsOverloaded">
            <summary>
            Session is overloaded.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.CallingTooRapdly">
            <summary>
            Calling too rapdly.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.TooManySessions">
            <summary>
            Too many sessions.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NotExpected">
            <summary>
            Not expected command.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.BadFriendFile">
            <summary>
            Bad friend file.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NotExpectedCVR">
            <summary>
            Not expected CVR.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ChangingTooRapdly">
            <summary>
            Changing too rapdly.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.ServerTooBusy">
            <summary>
            Server too busy.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.AuthenticationFailed">
            <summary>
            Authentication failed.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NotAllowedWhenOffline">
            <summary>
            Action is not allowed when user is offline.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.NotAcceptingNewUsers">
            <summary>
            New users are not accepted.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.KidsWithoutParentalConsent">
            <summary>
            Kids without parental consent.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.PassportNotYetVerified">
            <summary>
            Passport not yet verified.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.BadTicket">
            <summary>
            Bad Ticket.
            </summary>
        </member>
        <member name="F:MSNPSharp.MSNError.AccountNotOnThisServer">
            <summary>
            Account not on this server
            </summary>
        </member>
        <member name="T:MSNPSharp.EmoticonType">
            <summary>
            Custom emoticon type.
            </summary>
        </member>
        <member name="F:MSNPSharp.EmoticonType.StaticEmoticon">
            <summary>
            Emoticon that is a static picture
            </summary>
        </member>
        <member name="F:MSNPSharp.EmoticonType.AnimEmoticon">
            <summary>
            Emoticon that will display as a animation.
            </summary>
        </member>
        <member name="T:MSNPSharp.ContactConversationState">
            <summary>
            The state of contact in a conversation.
            </summary>
        </member>
        <member name="F:MSNPSharp.ContactConversationState.Invited">
            <summary>
            The contact is invited, but not join in yet.
            </summary>
        </member>
        <member name="F:MSNPSharp.ContactConversationState.Joined">
            <summary>
            The contact is in the conversation.
            </summary>
        </member>
        <member name="F:MSNPSharp.ContactConversationState.Left">
            <summary>
            The contact has left the conversation.
            </summary>
        </member>
        <member name="T:MSNPSharp.ConversationType">
            <summary>
            Types of different conversations.
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationType.None">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationType.SwitchBoard">
            <summary>
            MSN user conversation.
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationType.YIM">
            <summary>
            Yahoo Messenger conversation
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationType.MutipleUsers">
            <summary>
            A conversation that contains more than 2 users.
            </summary>
        </member>
        <member name="F:MSNPSharp.ConversationType.Chat">
            <summary>
            A conversation use for chatting.
            </summary>
        </member>
        <member name="T:MSNPSharp.TextMessageType">
            <summary>
            Types of text messages send through switchboard.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessageType.None">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessageType.Text">
            <summary>
            Plain text message
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessageType.Typing">
            <summary>
            User typing message
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessageType.Nudge">
            <summary>
            A nudge message
            </summary>
        </member>
        <member name="T:MSNPSharp.CacheKeyType">
            <summary>
            CacheKey for webservices
            </summary>
        </member>
        <member name="F:MSNPSharp.CacheKeyType.OmegaContactServiceCacheKey">
            <summary>
            CacheKey for contact service, which url is ***.omega.contacts.msn.com
            </summary>
        </member>
        <member name="F:MSNPSharp.CacheKeyType.StorageServiceCacheKey">
            <summary>
            CacheKey for profile storage service, which url is ***.storage.msn.com
            </summary>
        </member>
        <member name="T:MSNPSharp.P2PVersion">
            <summary>
            The current p2p version used in sb data transfer
            </summary>
        </member>
        <member name="T:MSNPSharp.MembershipType">
            <summary>
            Membership type. The values of fields in this class is just as the same as their names.
            </summary>
        </member>
        <member name="T:MSNPSharp.PropertyString">
            <summary>
            Property string for <see cref="T:MSNPSharp.MSNWS.MSNABSharingService.ContactType"/>
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleString">
            <summary>
            Scheme string for PUT command.
            </summary>
        </member>
        <member name="F:MSNPSharp.CircleString.CircleMessageScheme">
            <summary>
            The basic pattern of messages send and receive by circles.
            </summary>
        </member>
        <member name="F:MSNPSharp.CircleString.DefaultHostDomain">
            <summary>
            The default windows live circle host domain: live.com.
            </summary>
        </member>
        <member name="F:MSNPSharp.CircleString.CircleInvitationEmailSender">
            <summary>
            The default sender of join circle invitation email: Windows Live.
            </summary>
        </member>
        <member name="F:MSNPSharp.CircleString.InvitationEmailExtendedFlags">
            <summary>
            The extended-flags property of join circle invation email notification message.
            </summary>
        </member>
        <member name="T:MSNPSharp.WebServiceConstants">
            <summary>
            Constants for webservice parameter.
            </summary>
        </member>
        <member name="F:MSNPSharp.WebServiceConstants.MessengerAddressBookId">
            <summary>
            The messenger default addressbook Id: 00000000-0000-0000-0000-000000000000.
            </summary>
        </member>
        <member name="F:MSNPSharp.WebServiceConstants.MessengerGroupType">
            <summary>
            The guid for messenger group(not circle): C8529CE2-6EAD-434d-881F-341E17DB3FF8.
            </summary>
        </member>
        <member name="F:MSNPSharp.WebServiceConstants.ZeroTime">
            <summary>
            The default time for requesting the full membership and addressbook list: 0001-01-01T00:00:00.0000000.
            </summary>
        </member>
        <member name="T:MSNPSharp.AnnotationNames">
            <summary>
            Different string for Name property of <see cref="T:MSNPSharp.MSNWS.MSNABSharingService.Annotation"/>
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_InviteMessage">
            <summary>
            The value is: MSN.IM.InviteMessage
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_MPOP">
            <summary>
            The value is: MSN.IM.MPOP
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_BLP">
            <summary>
            The value is: MSN.IM.BLP
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_GTC">
            <summary>
            The value is: MSN.IM.GTC
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_RoamLiveProperties">
            <summary>
            The value is: MSN.IM.RoamLiveProperties
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_MBEA">
            <summary>
            The value is: MSN.IM.MBEA
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_Display">
            <summary>
            The value is: MSN.IM.Display
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.MSN_IM_BuddyType">
            <summary>
            The value is: MSN.IM.BuddyType
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.AB_NickName">
            <summary>
            The value is: AB.NickName
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.AB_Profession">
            <summary>
            The value is: AB.Profession
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.Live_Locale">
            <summary>
            The value is: Live.Locale
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.Live_Profile_Expression_LastChanged">
            <summary>
            The value is: Live.Profile.Expression.LastChanged
            </summary>
        </member>
        <member name="F:MSNPSharp.AnnotationNames.Live_Passport_Birthdate">
            <summary>
            The value is: Live.Passport.Birthdate
            </summary>
        </member>
        <member name="T:MSNPSharp.MimeHeaderStrings">
            <summary>
            Mime header key constants.
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Content_Length">
            <summary>
            The value is: Content-Length
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Content_Type">
            <summary>
            The value is: Content-Type
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Content_Transfer_Encoding">
            <summary>
            The value is: Content-Transfer-Encoding
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Message_Type">
            <summary>
            The value is: Message-Type
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Message_Subtype">
            <summary>
            The value is: Message-Subtype
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.MIME_Version">
            <summary>
            The value is: MIME-Version
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.X_MMS_IM_Format">
            <summary>
            The value is: X-MMS-IM-Format
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.P4_Context">
            <summary>
            The value is: P4-Context
            </summary>
        </member>
        <member name="F:MSNPSharp.MimeHeaderStrings.Max_Forwards">
            <summary>
            The value is: Max-Forwards
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.PersistentStream">
            <summary>
            A multi-user stream.
            </summary>
        </member>
        <member name="F:MSNPSharp.Core.PersistentStream.innerStream">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.CreateObjRef(System.Type)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.EndRead(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.EndWrite(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Equals(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Flush">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.GetHashCode">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.InitializeLifetimeService">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.ReadByte">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.SetLength(System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.ToString">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.WriteByte(System.Byte)">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.Core.PersistentStream.users">
            <summary>
            Keeps track of the number of users using the stream.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Open">
            <summary>
            Increases the number of users using this stream with 1.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.Close">
            <summary>
            Decreases the number of users using this stream with 1. If the number of users is below 0 the stream will really be closed.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.PersistentStream.#ctor(System.IO.Stream)">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.CanRead">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.CanSeek">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.CanWrite">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.Length">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.Position">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.PersistentStream.Users">
            <summary>
            The number of users using the stream.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.Store(MSNPSharp.MSNWS.MSNOIMStoreService.MessageType,System.String)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.StoreAsync(MSNPSharp.MSNWS.MSNOIMStoreService.MessageType,System.String)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.StoreAsync(MSNPSharp.MSNWS.MSNOIMStoreService.MessageType,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNOIMStoreService.OIMStoreService.StoreCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType.Identifier">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType.MessageNumber">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType.LastMessage">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.AttributedURI">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.AttributedURI.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.AttributedURI.AnyAttr">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.AttributedURI.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.StoreResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.StoreResultType.PointsConsumed">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.To">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.To.memberName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.Ticket">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.Ticket.passport">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.Ticket.appid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.Ticket.lockkey">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgment">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgment.Identifier">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgment.AcknowledgmentRange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgment.Any">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgment.AnyAttr">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgmentAcknowledgmentRange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgmentAcknowledgmentRange.Upper">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.SequenceAcknowledgmentAcknowledgmentRange.Lower">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.From">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.memberName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.friendlyName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.lang">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.proxy">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.msnpVer">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.From.buildVer">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.MessageType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNOIMStoreService.MessageType.text">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.StoreCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNOIMStoreService.StoreCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNOIMStoreService.StoreCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="M:MSNPSharp.ContactList.GetContact(System.String)">
            <summary>
            Get the specified contact.
            <remarks>If the contact does not exist, return null</remarks>
            </summary>
            <param name="account"></param>
            <returns>
            If the contact does not exist, return null.
            If the specified account has multi-clienttype, the contact with type
            <see cref="F:MSNPSharp.ClientType.PassportMember"/> will be returned first.
            If there's no PassportMember with the specified account, the contact with type 
            <see cref="F:MSNPSharp.ClientType.EmailMember"/> will be returned. Then the next is <see cref="F:MSNPSharp.ClientType.PhoneMember"/>
            ,<see cref="F:MSNPSharp.ClientType.LCS"/> and so on...
            </returns>
        </member>
        <member name="M:MSNPSharp.ContactList.GetContact(System.String,System.String)">
            <summary>
            Get the specified contact.
            <para>This overload will set the contact name to a specified value (if the contact exists.).</para>
            <remarks>If the contact does not exist, return null</remarks>
            </summary>
            <param name="account"></param>
            <param name="name"></param>
            <returns>
            If the contact does not exist, return null.
            If the specified account has multi-clienttype, the contact with type
            <see cref="F:MSNPSharp.ClientType.PassportMember"/> will be returned first.
            If there's no PassportMember with the specified account, the contact with type 
            <see cref="F:MSNPSharp.ClientType.EmailMember"/> will be returned.Then the next is <see cref="F:MSNPSharp.ClientType.PhoneMember"/>
            ,<see cref="F:MSNPSharp.ClientType.LCS"/> and so on...
            </returns>
        </member>
        <member name="M:MSNPSharp.ContactList.GetContact(System.String,System.String,MSNPSharp.ClientType)">
            <summary>
            Get a contact with specified account and client type, if the contact does not exist, create it.
            <para>This overload will set the contact name to a specified value.</para>
            </summary>
            <param name="account"></param>
            <param name="name">The new name you want to set.</param>
            <param name="type"></param>
            <returns>
            A <see cref="T:MSNPSharp.Contact"/> object.
            If the contact does not exist, create it.
            </returns>
        </member>
        <member name="M:MSNPSharp.ContactList.GetContact(System.String,MSNPSharp.ClientType)">
            <summary>
            Get a contact with specified account and client type, if the contact does not exist, create it.
            </summary>
            <param name="account">Account (Mail) of a contact</param>
            <param name="type">Contact type.</param>
            <returns>
            A <see cref="T:MSNPSharp.Contact"/> object.
            If the contact does not exist, create it.
            </returns>
        </member>
        <member name="M:MSNPSharp.ContactList.HasContact(System.String)">
            <summary>
            Check whether the specified account is in the contact list.
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.ContactList.HasContact(System.String,MSNPSharp.ClientType)">
            <summary>
            Check whether the account with specified client type is in the contact list.
            </summary>
            <param name="account"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.ContactList.Remove(System.String)">
            <summary>
            Remove all the contacts with the specified account.
            </summary>
            <param name="account"></param>
        </member>
        <member name="M:MSNPSharp.ContactList.Remove(System.String,MSNPSharp.ClientType)">
            <summary>
            Remove a contact with specified account and client type.
            </summary>
            <param name="account"></param>
            <param name="type"></param>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PTransferSession">
            <summary>
            A single transfer of data within a p2p session. 
            </summary>
            <remarks>
            P2PTransferSession handles all messages with a specified session id in the p2p header.
            Optional a direct connection can be created. It will try to connect to the remote client or listening for incoming connections.
            If that succeeds and the local client is the sender of the data a seperate thread will be started to send data messages over the direct connection.
            However, if the direct connection fails it will send the data messages over the switchboard session. These latter messages go via the messenger servers and is therefore quite slow compared to direct connections
            but it is guaranteed to work even when both machines are behind a proxy, firewall or router.
            </remarks>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.autoCloseStream">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.clientData">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.dataMessageIdentifier">
            <summary>
            Tracked to send the disconnecting message (0x40 flag) with the correct datamessage identifiers as it's acknowledge identifier. (protocol)
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.messageSession">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.messageFlag">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.dataStream">
            <summary>
            The stream to read from when data is send, or to write to when data is received.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.isSender">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.#ctor(MSNPSharp.P2PVersion,MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.GetNextSLPRequestDataPacketNumber(System.UInt16)">
            <summary>
            Get the next data package number for the SIP request text message, such as INVITE and BYE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.GetNextSLPStatusDataPacketNumber(System.UInt16)">
            <summary>
            Get the next data package number to the SIP status text message, such as 200 OK and 603 Decline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.GetNextSLPRequestDataPacketNumber">
            <summary>
            Get the next data package number for the SIP request text message, such as INVITE and BYE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.GetNextSLPStatusDataPacketNumber">
            <summary>
            Get the next data package number to the SIP status text message, such as 200 OK and 603 Decline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.AbortTransfer">
            <summary>
            Aborts the datatransfer, if available. This will send a P2P abort message and stop the sending thread.
            It will not close a direct connection. If AutoCloseStream is set to true, the datastream will be closed.
            <remarks>
            This function is called by internal.
            <para>If you want to abort the current transfer,call <see cref="M:MSNPSharp.DataTransfer.MSNSLPHandler.CloseSession(MSNPSharp.DataTransfer.P2PTransferSession)"/></para>
            </remarks>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.StartDataTransfer(System.Boolean)">
            <summary>
            Starts a seperate thread to send the data in the stream to the remote client. It will first wait for a direct connection if tryDirectConnection is set to true.
            </summary>
            <remarks>
            This method will not open or close the specified datastream.
            </remarks>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.messageProcessor">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles P2PMessages. Other messages are ignored. All incoming messages are supposed to belong to this session.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.SendMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Sends a message for this session to the message processor. If a direct connection is established,
            the p2p message is directly send to the message processor. If there is no direct connection available,
            it will wrap the incoming p2p message in a MSGMessage with the correct parameters.
            It also sets the identifiers and acknowledge session, provided they're not already set.
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.handlers">
            <summary>
             Collection of handlers
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.RegisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Registers handlers for incoming p2p messages.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.UnregisterHandler(MSNPSharp.Core.IMessageHandler)">
            <summary>
            Unregisters handlers.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.CreateClosingMessage">
            <summary>
            Creates a message which is send directly after the last data message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.SendAbortMessage">
            <summary>
            Sends the remote client a p2p message with the 0x80 flag to abort.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.OnTransferStarted">
            <summary>
            Fires the TransferStarted event.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.OnTransferFinished">
            <summary>
            Fires the TransferFinished event.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.OnTransferAborted">
            <summary>
            Fires the TransferAborted event.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.TransferDataEntry">
            <summary>
            Entry point for the thread. This thread will send the data messages to the message processor.
            In case it is a direct connection P2PDCMessages will be send. If no direct connection is established
            P2PMessage objects are wrapped in a SBMessage object and send to the message processor. Which is in the latter case
            probably a SB processor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.SendDisconnectMessage">
            <summary>
            Sends the remote client a p2p message with the 0x40 flag to indicate we are going to close the connection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.AbortTransferThread">
            <summary>
            Aborts a running data transfer thread.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.transferThread">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.transferThreadStart">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSession.waitingDirectConnection">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.messageSession_DirectConnectionEstablished(System.Object,System.EventArgs)">
            <summary>
            Start the transfer session if it is waiting for a direct connection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSession.messageSession_DirectConnectionFailed(System.Object,System.EventArgs)">
            <summary>
            Start the transfer session if it is waiting for a direct connection. Because the direct connection attempt failed the transfer will be over the switchboard.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.AutoCloseStream">
            <summary>
            Defines whether the stream is automatically closed after the transfer has finished or been aborted.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.ClientData">
            <summary>
            This property can be used by the client-programmer to include application specific data
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.DataPreparationAck">
            <summary>
            Tracked to know when an acknowledgement for the (switchboards) data preparation message is received
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.MessageSession">
            <summary>
            The message session which keeps track of the local / remote message identifiers and redirects messages to this handler based on the session id
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.TransferProperties">
            <summary>
            The transfer properties for this transfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.MessageFlag">
            <summary>
            This value is set in the flag field in a p2p header.
            </summary>
            <remarks>
            For filetransfers this value is for example 0x1000030
            </remarks>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.MessageFooter">
            <summary>
            This value is set in the footer field in a p2p header.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.DataStream">
            <summary>
            The stream to read from when data is send, or to write to when data is received. Default is a MemorySteam.
            </summary>
            <remarks>
            In the eventhandler, when an invitation is received, the client programmer must set this property in order to enable the transfer to succeed.
            In the case of the filetransfer, when the local client is the receiver, the incoming data is written to the specified datastream.
            In the case of the invitation for a msn object (display picture, emoticons, background), when the local client is the sender, the outgoing data is read from the specified datastream.
            </remarks>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.IsSender">
            <summary>
            Defines whether the local client is sender or receiver
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.DataPacketNumber">
            <summary>
            The PackageNumber field used by p2pv2 messages.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.MessageProcessor">
            <summary>
            The message processor to which p2p messages (this includes p2p data messages) will be send
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.TransferThread">
            <summary>
            The thread in which the data messages are send
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.TransferThreadStart">
            <summary>
            Kickstart object to start the data transfer thread
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSession.WaitingDirectConnection">
            <summary>
            Indicates whether the session is waiting for the result of a direct connection attempt
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PTransferSession.TransferStarted">
            <summary>
            Occurs when the sending of data messages has started.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PTransferSession.TransferFinished">
            <summary>
            Occurs when the sending of data messages has finished.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.P2PTransferSession.TransferAborted">
            <summary>
            Occurs when the transfer of data messages has been aborted.
            </summary>
        </member>
        <member name="T:MSNPSharp.MobileMessage">
            <summary>
            Message that is send to a mobile device.
            </summary>
        </member>
        <member name="M:MSNPSharp.MobileMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MSNPSharp.MobileMessage.ParseBytes(System.Byte[])">
            <summary>
            Throws an exception.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MSNPSharp.MobileMessage.GetBytes">
            <summary>
            Returns the XML formatted message that represents the mobile message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.MobileMessage.PrepareMessage">
            <summary>
            Sets the command and commandvalues of the parent.
            </summary>
        </member>
        <member name="M:MSNPSharp.MobileMessage.ToString">
            <summary>
            Returns the XML formatted body.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MSNPSharp.MobileMessage.CallbackNumber">
            <summary>
            The telephone number that the remote contact will see.
            </summary>
        </member>
        <member name="P:MSNPSharp.MobileMessage.CallbackDeviceName">
            <summary>
            The telephone device type that the remote contact will see. (e.g. "Homephone", "Work phone")
            </summary>
        </member>
        <member name="P:MSNPSharp.MobileMessage.Text">
            <summary>
            The text that will be send to the remote contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.MobileMessage.Receiver">
            <summary>
            The account of the remote contact.
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleInviter">
            <summary>
            The <see cref="T:MSNPSharp.Contact"/> who send a join contact invitation.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleInviter.Message">
            <summary>
            Invitation message send via the email.
            </summary>
        </member>
        <member name="T:MSNPSharp.Circle">
            <summary>
            A new type of group introduces with WLM2009.
            </summary>
        </member>
        <member name="M:MSNPSharp.Circle.SendNudge">
            <summary>
            Send nudge to all members in this circle.
            </summary>
            <exception cref="T:MSNPSharp.MSNPSharpException">NSMessageHandler is null</exception>
            <exception cref="T:System.InvalidOperationException">Not sign in to the server, or in <see cref="F:MSNPSharp.PresenceStatus.Hidden"/> status.</exception>
        </member>
        <member name="M:MSNPSharp.Circle.SendMessage(MSNPSharp.TextMessage)">
            <summary>
            Send a text message to all members in this circle.
            </summary>
            <param name="textMessage"></param>
            <exception cref="T:MSNPSharp.MSNPSharpException">NSMessageHandler is null</exception>
            <exception cref="T:System.InvalidOperationException">Not sign in to the server, or in <see cref="F:MSNPSharp.PresenceStatus.Hidden"/> status.</exception>
        </member>
        <member name="M:MSNPSharp.Circle.SendTypingMessage">
            <summary>
            Send a typing message indicates that you are typing to all members in this circle.
            </summary>
            <exception cref="T:MSNPSharp.MSNPSharpException">NSMessageHandler is null</exception>
            <exception cref="T:System.InvalidOperationException">Not sign in to the server, or in <see cref="F:MSNPSharp.PresenceStatus.Hidden"/> status.</exception>
        </member>
        <member name="M:MSNPSharp.Circle.AddMember(MSNPSharp.CircleContactMember)">
            <summary>
            Add or update member to memberlist.
            </summary>
            <param name="member"></param>
        </member>
        <member name="P:MSNPSharp.Circle.Role">
            <summary>
            The ownership of this circle.
            </summary>
        </member>
        <member name="P:MSNPSharp.Circle.Members">
            <summary>
            Circle member list.
            </summary>
        </member>
        <member name="P:MSNPSharp.Circle.Mail">
            <summary>
            Circle account, in abId@HostDomain format.
            </summary>
        </member>
        <member name="P:MSNPSharp.Circle.Name">
            <summary>
            The display name of circle
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleContactMember">
            <summary>
            The member of a circle.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleContactMember.MemberType">
            <summary>
            The <see cref="T:MSNPSharp.ClientType"/> of this <see cref="T:MSNPSharp.Contact"/>.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleContactMember.FullAccount">
            <summary>
            The identifier of contact.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleContactMember.CircleMail">
            <summary>
            The identifier of circle.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PDirectProcessor">
            <summary>
            Handles the direct connections in P2P sessions.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.Listen(System.Net.IPAddress,System.Int32)">
            <summary>
            Starts listening at the specified port in the connectivity settings.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PDirectProcessor.isListener">
            <summary>
            Returns whether this processor was initiated as listening (true) or connecting (false).
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.EndAcceptCallback(System.IAsyncResult)">
            <summary>
            Called when an incoming connection has been accepted.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.Disconnect">
            <summary>
            Closes the socket connection.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.OnMessageReceived(System.Byte[])">
            <summary>
            Discards the foo message and sends the message to all handlers as a P2PDCMessage object.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PDirectProcessor.SendMessage(MSNPSharp.Core.NetworkMessage)">
            <summary>
            Sends the P2PMessage directly over the socket. Accepts P2PDCMessage and P2PMessage objects.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PDirectProcessor.IsListener">
            <summary>
            Returns whether this processor was initiated as listening (true) or connecting (false).
            </summary>
        </member>
        <member name="M:MSNPSharp.NSMessageProcessor.ResetTransactionID">
            <summary>
            Reset the transactionID to zero.
            </summary>
        </member>
        <member name="T:MSNPSharp.Core.Factory">
            <summary>
            Defines the way in which dotMSN core objects are created. No more Used by MSNPSharp core classes.
            Override these types to use custom-made handlers or processor.
            </summary>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateMSNSLPHandler">
            <summary>
            Creates a default msnslpHandler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateP2PHandler">
            <summary>
            Creates a default p2p handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateP2PTransferSession">
            <summary>
            Creates a default p2p transfer session handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateP2PMessageSession">
            <summary>
            Creates a default p2p message session handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateContact">
            <summary>
            Creates a default contact.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateCircle">
            <summary>
            Creates a default circle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateSwitchboardProcessor">
            <summary>
            Creates a default switchboard handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateSwitchboardHandler">
            <summary>
            Creates a default switchboard handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateYIMMessageHandler">
            <summary>
            Creates a default Yahoo Messenger message handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateNameserverHandler">
            <summary>
            Creates a default nameserver handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.CreateNameserverProcessor">
            <summary>
            Creates a default nameserver processor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.Core.Factory.#ctor">
            <summary>
            No instances required.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.NameserverHandler">
            <summary>
            The type used to create nameserver handler objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.NameserverProcessor">
            <summary>
            The type used to create nameserver processor objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.SwitchboardHandler">
            <summary>
            The type used to create switchboard handler objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.YIMMessageHandler">
            <summary>
            The type used to create Yahoo Messenger message handler objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.SwitchboardProcessor">
            <summary>
            The type used to create nameserver processor objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.Contact">
            <summary>
            The type used to create contact objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.Circle">
            <summary>
            The type used to create circle objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.P2PHandler">
            <summary>
            The type used to create P2P Handler objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.P2PTransferSession">
            <summary>
            The type used to create P2P transfer session objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.P2PMessageSession">
            <summary>
            The type used to create P2P message session objects.
            </summary>
        </member>
        <member name="P:MSNPSharp.Core.Factory.MSNSLPHandler">
            <summary>
            The type used to create MSNSLP Handler objects.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.FindMembership(MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.FindMembershipAsync(MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.FindMembershipAsync(MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.AddMember(MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.AddMemberAsync(MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.AddMemberAsync(MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.DeleteMember(MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.DeleteMemberAsync(MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.DeleteMemberAsync(MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.CreateCircle(MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.CreateCircleAsync(MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.CreateCircleAsync(MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.FindMembershipCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.AddMemberCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.DeleteMemberCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.SharingServiceBinding.CreateCircleCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindAll(MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindAllAsync(MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindAllAsync(MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactAdd(MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactDelete(MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactAdd(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupAdd(MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupUpdate(MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupUpdateAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupUpdateAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupDelete(MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactDelete(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactDeleteAsync(MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactUpdate(MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactUpdateAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactUpdateAsync(MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABAdd(MSNPSharp.MSNWS.MSNABSharingService.ABAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABAddRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABAddAsync(MSNPSharp.MSNWS.MSNABSharingService.ABAddRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.UpdateDynamicItem(MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.UpdateDynamicItemAsync(MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.UpdateDynamicItemAsync(MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindContactsPaged(MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindContactsPagedAsync(MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindContactsPagedAsync(MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.CreateContact(MSNPSharp.MSNWS.MSNABSharingService.CreateContactType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.CreateContactAsync(MSNPSharp.MSNWS.MSNABSharingService.CreateContactType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.CreateContactAsync(MSNPSharp.MSNWS.MSNABSharingService.CreateContactType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ManageWLConnection(MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ManageWLConnectionAsync(MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ManageWLConnectionAsync(MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.BreakConnection(MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.BreakConnectionAsync(MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.BreakConnectionAsync(MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindAllCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactAddCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactDeleteCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactAddCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupAddCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupDeleteCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABGroupContactDeleteCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABContactUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABAddCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.UpdateDynamicItemCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ABFindContactsPagedCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.CreateContactCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.ManageWLConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.ABServiceBinding.BreakConnectionCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.#ctor">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.GetContactsRecentActivity(MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.GetContactsRecentActivityAsync(MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.GetContactsRecentActivityAsync(MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:MSNPSharp.MSNWS.MSNABSharingService.WhatsUpServiceBinding.GetContactsRecentActivityCompleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABAuthHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABAuthHeader.ManagedGroupRequest">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABAuthHeader.TicketToken">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionResponseType">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType.abHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType.contactId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType.deleteContact">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionRequestType.blockContact">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.abHandleType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abHandleType.ABId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abHandleType.Puid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abHandleType.Cid">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleResponseType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateContactType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateContactType.abHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateContactType.contactHandle">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactHandleType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactHandleType.Email">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactHandleType.Puid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactHandleType.Cid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactHandleType.CircleId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.abHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.contactId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.connection">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.presence">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.action">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.relationshipType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.relationshipRole">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionRequestType.annotations">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.Annotation">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Annotation.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Annotation.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResultType.Activities">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResultType.Templates">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResultType.FeedUrl">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.OwnerCID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.ObjectId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.ApplicationId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.ChangeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.PublishDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ActivityDetailsType.TemplateVariables">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.TemplateVariableBaseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.TemplateVariableBaseType.Name">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ListTemplateVariable">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ListTemplateVariable.Items">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ListTemplateVariableItemType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ListTemplateVariableItemType.Values">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.SimpleTemplateVariableBaseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.SimpleTemplateVariableBaseType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ImageTemplateVariable">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ImageTemplateVariable.Href">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ImageTemplateVariable.Notations">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.NotationType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotationType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotationType.Value">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.HlinkTemplateVariable">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.HlinkTemplateVariable.Text">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.HlinkTemplateVariable.Notations">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.TextTemplateVariable">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PublisherIdTemplateVariable">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PublisherIdTemplateVariable.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PublisherIdTemplateVariable.NameHint">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.TargetIdTemplateVariable">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.TargetIdTemplateVariable.IdOwner">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.ApplicationId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.ApplicationName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.ChangeType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.Locale">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.RequestedLocales">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.TemplateRevision">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.Templates">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateContainerType.CollapseCondition">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateType.Cardinality">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateType.Data">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RecentActivityTemplateType.Title">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType.entityHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType.locales">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityRequestType.count">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.entityHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.entityHandle.Cid">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType.Groups">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType.Contacts">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType.CircleResult">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultType.Ab">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GroupType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.groupId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.groupInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.propertiesChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.fDeleted">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.fDeletedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupType.lastChange">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.annotations">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.groupType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsNotMobileVisible">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsNotMobileVisibleSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsPrivate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsPrivateSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsFavorite">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.IsFavoriteSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.fMessenger">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupInfoType.fMessengerSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.contactId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.contactInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.propertiesChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.fDeleted">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.fDeletedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.lastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.CreateDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.LastModifiedBy">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactType.CreatedBy">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.emails">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.phones">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.locations">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.webSites">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.annotations">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.groupIds">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.groupIdsDeleted">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.contactType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.quickName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.firstName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.MiddleName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.lastName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.Suffix">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.NameTitle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.passportName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsPassportNameHidden">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsPassportNameHiddenSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.displayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.puid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.puidSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.CID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.CIDSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.BrandIdList">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.comment">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsNotMobileVisible">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsNotMobileVisibleSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isMobileIMEnabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isMobileIMEnabledSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isMessengerUser">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isMessengerUserSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isFavorite">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isFavoriteSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isSmtp">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.isSmtpSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.hasSpace">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.hasSpaceSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.spotWatchState">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.birthdate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.primaryEmailType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.primaryEmailTypeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PrimaryLocation">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PrimaryLocationSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PrimaryPhone">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PrimaryPhoneSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsPrivate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsPrivateSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.Anniversary">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.Gender">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.TimeZone">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.NetworkInfoList">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PublicDisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsAutoUpdateDisabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsAutoUpdateDisabledSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.MessengerMemberInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.PropertiesChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.clientErrorData">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsHidden">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactInfoType.IsHiddenSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.contactEmailType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.email">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.isMessengerEnabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.Capability">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.MessengerEnabledExternally">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactEmailType.propertiesChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.ContactEmailPersonal">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.ContactEmailBusiness">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.ContactEmailOther">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.ContactEmailMessenger">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.Messenger2">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.Messenger3">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.Messenger4">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactEmailTypeType.Passport">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactPhoneType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactPhoneType.contactPhoneType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactPhoneType.number">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactPhoneType.isMessengerEnabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactPhoneType.propertiesChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhonePersonal">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhoneBusiness">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhoneMobile">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhonePager">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhoneOther">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.ContactPhoneFax">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.Personal2">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.Business2">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.BusinessFax">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactPhoneTypeType.BusinessMobile">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.contactLocationType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.street">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.city">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.state">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.country">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.postalCode">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.Department">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactLocationType.Changes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactLocationTypeType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactLocationTypeType.ContactLocationPersonal">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactLocationTypeType.ContactLocationBusiness">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.contactWebSiteType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactWebSiteType.contactWebSiteType1">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.contactWebSiteType.webURL">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactWebSiteTypeType">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactWebSiteTypeType.ContactWebSitePersonal">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.ContactWebSiteTypeType.ContactWebSiteBusiness">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.DomainId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.DomainIdSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.DomainTag">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.UserTileURL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.ProfileURL">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipTypeSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipState">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipStateSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipStateDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipRole">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.RelationshipRoleSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.NDRCount">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.NDRCountSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.InviterName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.InviterMessage">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.InviterCID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.InviterCIDSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.InviterEmail">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.CreateDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.LastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.PropertiesChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NetworkInfoType.SourceId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.MessengerMemberInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.MessengerMemberInfo.PendingAnnotations">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.MessengerMemberInfo.DisplayName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CircleResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleResultType.Circles">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleResultType.CircleTicket">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CircleInverseInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleInverseInfoType.Content">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleInverseInfoType.PersonalInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleInverseInfoType.Deleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContentType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentType.Handle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentType.Info">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContentHandleType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentHandleType.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.Domain">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.HostedDomain">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.Type">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.MembershipAccess">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.IsPresenceEnabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.RequestMembershipOption">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.ProfileLastUpdated">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.Changes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.CreateDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContentInfoType.LastChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.MembershipInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.Name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.IsNotMobileVisible">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.IsFavorite">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.IsFamily">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PersonalInfoType.Changes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.MembershipInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.MembershipInfoType.CirclePersonalMembership">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CirclePersonalMembershipType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CirclePersonalMembershipType.Role">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CirclePersonalMembershipType.State">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.abInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.lastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.DynamicItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.RecentActivityItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.createDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResultTypeAB.propertiesChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.abInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.name">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.ownerPuid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.OwnerCID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.ownerEmail">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.fDefault">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.joinedNamespace">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.joinedNamespaceSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsBot">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsBotSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsParentManaged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsParentManagedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.SubscribeExternalPartner">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.SubscribeExternalPartnerSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.NotifyExternalPartner">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.NotifyExternalPartnerSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.AddressBookType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.MessengerApplicationServiceCreated">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.MessengerApplicationServiceCreatedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsBetaMigrated">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.IsBetaMigratedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.MigratedTo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abInfoType.MigratedToSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType.filterOptions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType.abView">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType.extendedContent">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedRequestType.abHandle">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.filterOptionsType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.filterOptionsType.DeltasOnly">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.filterOptionsType.LastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.filterOptionsType.ContactFilter">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactFilterType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactFilterType.IncludeHiddenContacts">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemRequestType.dynamicItems">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.Type">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.Deleted">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.DeletedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.LastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.Notifications">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseDynamicItemType.Changes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType.StoreService">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType.Status">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType.LastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType.Gleam">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.NotificationDataType.InstanceId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ServiceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceType.Memberships">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceType.Info">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceType.Changes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceType.LastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceType.Deleted">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.Membership">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Membership.MemberRole">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Membership.Members">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Membership.MembershipIsComplete">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.Membership.MembershipIsCompleteSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BaseMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.MembershipId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.Type">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.Location">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.State">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.Annotations">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.Deleted">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.LastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.JoinedDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.ExpirationDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMember.Changes">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BaseMemberLocation">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMemberLocation.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMemberLocation.IsPassportNameHidden">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BaseMemberLocation.CID">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.MemberState">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.MemberState.Accepted">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.MemberState.Pending">
            <remarks/>
        </member>
        <member name="F:MSNPSharp.MSNWS.MSNABSharingService.MemberState.Removed">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GroupMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GroupMember.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PartnerMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PartnerMember.AppId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PartnerMember.Scope">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.EveryoneMember">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.DomainMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.DomainMember.DomainName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ServiceMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceMember.Service">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.HandleType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.HandleType.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.HandleType.Type">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.HandleType.ForeignId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.RoleMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMember.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMember.DefiningService">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMember.MaxRoleRecursionDepth">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMember.MaxDegreesSeparation">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.RoleMemberDefiningService">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMemberDefiningService.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMemberDefiningService.Type">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.RoleMemberDefiningService.ForeignId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PhoneMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PhoneMember.PhoneNumber">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.EmailMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.EmailMember.Email">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PassportMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.PassportName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.IsPassportNameHidden">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.IsPassportNameHiddenSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.PassportId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.PassportIdSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.CID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.CIDSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportMember.PassportChanges">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CircleMember">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleMember.CircleId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.InfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.Handle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.DisplayName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.InverseRequired">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.AuthorizationCriteria">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.RSSUrl">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.InfoType.IsBot">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.CID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.PassportName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.PassportId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.SpaceStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.SpaceLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.SpaceLastViewed">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.SpaceGleam">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.SpaceGleamSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ProfileLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ProfileLastView">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ProfileStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ProfileGleam">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ProfileGleamSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ContactProfileStatus">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ContactProfileLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.ContactProfileLastViewed">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.PassportDynamicItem.LiveContactLastChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CircleDynamicItem">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleDynamicItem.Id">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABAddRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABAddRequestType.abInfo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABAddResponseType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABAddResponseType.ABAddResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType.contacts">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteRequestType.groupFilter">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.groupFilterType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.groupFilterType.groupIds">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateRequestType.contacts">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteRequestType.groupFilter">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateRequestType.groups">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddResultType.guid">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType.groupAddOptions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestType.groupInfo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestTypeGroupAddOptions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestTypeGroupAddOptions.fRenameOnMsgrConflict">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestTypeGroupAddOptions.fRenameOnMsgrConflictSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestTypeGroupInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddRequestTypeGroupInfo.GroupInfo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddResultType.guid">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType.groupFilter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType.contacts">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestType.groupContactAddOptions">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestTypeGroupContactAddOptions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestTypeGroupContactAddOptions.fGenerateMissingQuickName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestTypeGroupContactAddOptions.fGenerateMissingQuickNameSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestTypeGroupContactAddOptions.EnableAllowListManagement">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddRequestTypeGroupContactAddOptions.EnableAllowListManagementSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteRequestType.contacts">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ContactIdType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ContactIdType.contactId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddResultType.guid">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType.contacts">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestType.options">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestTypeOptions">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddRequestTypeOptions.EnableAllowListManagement">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType.groups">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType.contacts">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType.DynamicItems">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType.CircleResult">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultType.ab">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeCircleResult">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeCircleResult.CircleTicket">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.abInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.lastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.DynamicItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.RecentActivityItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.createDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResultTypeAB.propertiesChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.abView">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.deltasOnly">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.lastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.dynamicItemView">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllRequestType.dynamicItemLastChange">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.callerInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.callerInfoType.PublicDisplayName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.abType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.abId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.abInfo">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.lastChange">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.DynamicItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.RecentActivityItemLastChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.createDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.abType.propertiesChanged">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType.properties">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleRequestType.callerInfo">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType.serviceHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType.memberships">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberRequestType.nsHandle">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType.serviceHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.AddMemberRequestType.memberships">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CircleAttributesType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleAttributesType.IsPresenceEnabled">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleAttributesType.IsEvent">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleAttributesType.IsEventSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CircleAttributesType.Domain">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.Handle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.CreatorPuid">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.CreatorCID">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.CreatorPassportName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.CircleAttributes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.MessengerApplicationServiceCreated">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoType.MessengerApplicationServiceCreatedSpecified">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoTypeHandle">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoTypeHandle.Id">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoTypeHandle.IsPassportNameHidden">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceInfoTypeHandle.CID">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceType.Info">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceType.Changes">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceType.CreateDate">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.OwnerNamespaceType.LastChange">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResultType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResultType.Services">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResultType.OwnerNamespace">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType.serviceFilter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType.View">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType.deltasOnly">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestType.lastChange">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestTypeServiceFilter">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipRequestTypeServiceFilter.Types">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.WNAuthHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNAuthHeader.TicketToken">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.WNApplicationHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNApplicationHeader.ApplicationId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader.Version">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader.CacheKey">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader.CacheKeyChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader.CacheKeyChangedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.WNServiceHeader.PreferredHostName">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.Version">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.CacheKey">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.CacheKeyChanged">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.CacheKeyChangedSpecified">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.PreferredHostName">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ServiceHeader.SessionId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader.ApplicationId">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader.IsMigration">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader.PartnerScenario">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader.CacheKey">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABApplicationHeader.BrandId">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipResponse.FindMembershipResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.AddMemberResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleResponse.CreateCircleResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllResponse.ABFindAllResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddResponse.ABContactAddResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddResponse.ABGroupContactAddResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddResponse.ABGroupAddResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateResponse">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedResponse.ABFindContactsPagedResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateContactResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateContactResponse.CreateContactResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionResponse.ManageWLConnectionResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResponse">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityResponse.GetContactsRecentActivityResult">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.FindMembershipCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.AddMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.AddMemberCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.AddMemberCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.DeleteMemberCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateCircleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindAllCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactAddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactDeleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactAddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupAddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupDeleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABGroupContactDeleteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABContactUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABAddCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABAddCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABAddCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.UpdateDynamicItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ABFindContactsPagedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.CreateContactCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.CreateContactCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.ManageWLConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.BreakConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:MSNPSharp.MSNWS.MSNABSharingService.GetContactsRecentActivityCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:MSNPSharp.DataTransfer.DataTransferType">
            <summary>
            Defines the type of datatransfer for a MSNSLPHandler
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.DataTransferType.Unknown">
            <summary>
            Unknown datatransfer type.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.DataTransferType.File">
            <summary>
            Filetransfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.DataTransferType.Emoticon">
            <summary>
            Emoticon transfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.DataTransferType.DisplayImage">
            <summary>
            Displayimage transfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.DataTransferType.Activity">
            <summary>
            Activity invitation.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.ActivityInfo">
            <summary>
            Holds the property of activity such as AppID and activity name.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.ActivityInfo.AppID">
            <summary>
            The AppID of activity.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.ActivityInfo.ActivityName">
            <summary>
            The name of activity.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.MSNSLPTransferProperties">
            <summary>
            Holds all properties for a single data transfer.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.dataType">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.remoteInvited">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.nonce">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.lastBranch">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.callId">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.sessionId">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.dataSize">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.context">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.checksum">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.lastCSeq">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.localContactIDString">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPTransferProperties.remoteContactIDString">
            <summary>
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.DataType">
            <summary>
            The kind of data that will be transferred
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.RemoteInvited">
            <summary>
            Defines whether the remote client has invited the transfer (true) or the local client has initiated the transfer (false).
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.Nonce">
            <summary>
            The GUID used in the handshake message for direct connections
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.LastBranch">
            <summary>
            The branch last received in the message session
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.CallId">
            <summary>
            The unique call id for this transfer
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.SessionId">
            <summary>
            The unique session id for the transfer
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.DataSize">
            <summary>
            The total length of the data, in bytes
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.Context">
            <summary>
            The context send in the invitation. This informs the client about the type of transfer, filename, file-hash, msn object settings, etc.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.Checksum">
            <summary>
            The checksum of the fields used in the context
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.LastCSeq">
            <summary>
            CSeq identifier
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.LocalContact">
            <summary>
            The the local contact in the transfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPTransferProperties.RemoteContact">
            <summary>
            The the remote contact in the transfer session.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.P2PTransferSessionEventArgs">
            <summary>
            Used as event argument when a P2PTransferSession is affected.
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.P2PTransferSessionEventArgs.transferSession">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.P2PTransferSessionEventArgs.#ctor(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Constructor.
            </summary>
            <param name="transferSession"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.P2PTransferSessionEventArgs.TransferSession">
            <summary>
            The affected transfer session
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs">
            <summary>
            Used as event argument when an invitation is received.
            </summary>
            <remarks>
            The client programmer must set the Accept property to true (accept) or false (reject) to response to the invitation. By default the invitation is rejected.
            </remarks>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.transferProperties">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.msnObject">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.filename">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.fileSize">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.invitationMessage">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.transferSession">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.accept">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.#ctor(MSNPSharp.DataTransfer.MSNSLPTransferProperties,MSNPSharp.DataTransfer.SLPMessage,MSNPSharp.DataTransfer.P2PTransferSession,MSNPSharp.DataTransfer.MSNSLPHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="transferProperties"></param>
            <param name="invitationMessage"></param>
            <param name="transferSession"></param>
            <param name="handler"></param>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.TransferProperties">
            <summary>
            The affected transfer session
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.MSNObject">
            <summary>
            The corresponding msnobject defined in the invitation. Only available in case of an msn object transfer (image display, emoticons).
            </summary>
            <remarks>
            Created from the Context property of the <see cref="T:MSNPSharp.DataTransfer.MSNSLPTransferProperties"/> object.
            </remarks>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.Filename">
            <summary>
            Name of the file the remote contact wants to send. Only available in case of a filetransfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.FileSize">
            <summary>
            The total size of the file in bytes. Only available in case of a filetransfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.Activity">
            <summary>
            The activity properties.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.InvitationMessage">
            <summary>
            The affected transfer session
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.TransferSession">
            <summary>
            The p2p transfer session that will transfer the session data
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.Accept">
            <summary>
            Defines if the transfer is accepted. This must be set by the client programmer in a event handler. By default this property is set to false, which means the invitation is rejected. If this property is set to true, the invitation is accepted.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs.DelayProcess">
            <summary>
            Whether process the invitation request right after the event was fired.
            </summary>
        </member>
        <member name="T:MSNPSharp.DataTransfer.MSNSLPHandler">
            <summary>
            Handles invitations and requests for file transfers, emoticons, user displays and other msn objects.
            </summary>
            <remarks>
            MSNSLPHandler is responsible for communicating with the remote client about the transfer properties.
            This means receiving and sending details about filelength, filename, user display context, etc.
            When an invitation request is received the client programmer is asked to accept or decline the invitation. This is done
            through the TransferInvitationReceived event. The client programmer must handle this event and set the Accept and DataStream property in the event argument, see <see cref="T:MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs"/>.
            When the receiver of the invitation has accepted a <see cref="T:MSNPSharp.DataTransfer.P2PTransferSession"/> is created and used to actually send the data. In the case
            of user displays or other msn objects the data transfer always goes over the switchboard. In case of a file transfer there will be negotiating about the direct connection to setup.
            Depending on the connectivity of both clients, a request for a direct connection is send to associated the <see cref="T:MSNPSharp.DataTransfer.P2PTransferSession"/> object.
            </remarks>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPHandler.messageProcessor">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPHandler.externalEndPoint">
            <summary>
            </summary>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPHandler.localEndPoint">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.SendInvitation(MSNPSharp.Contact,MSNPSharp.Contact,MSNPSharp.MSNObject)">
            <summary>
            Sends the remote contact a request for the given context. The invitation message is send over the current MessageProcessor.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.SendInvitation(MSNPSharp.Contact,MSNPSharp.Contact,System.String,System.String)">
            <summary>
            Sends the remote contact a invitation for the activity. The invitation message is send over the current MessageProcessor.
            </summary>
            <param name="localContact"></param>
            <param name="remoteContact"></param>
            <param name="activityID">The ID of activity, that was register by Microsoft.</param>
            <param name="activityName">The name of Activity.</param>
            <returns></returns>
            <example>
            <code language="C#">
            //An example that invites a remote user to attend the "Music Mix" activity.
            
            String remoteAccount = @"remoteUser@hotmail.com";
            
            String activityID = "20521364";        //The activityID of Music Mix activity.
            String activityName = "Music Mix";     //Th name of acticvity
            
            P2PMessageSession session =  Conversation.Messenger.P2PHandler.GetSession(Conversation.Messenger.Owner.Mail, remoteAccount);
            MSNSLPHandler slpHandler =  session.GetHandler(typeof(MSNSLPHandler)) as MSNSLPHandler ;
            slpHandler.SendInvitation(Conversation.Messenger.Owner.Mail, remoteaccount, activityID, activityName);
            </code>
            </example>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.SendInvitation(MSNPSharp.Contact,MSNPSharp.Contact,System.String,System.IO.Stream)">
            <summary>
            Sends the remote contact a request for the filetransfer. The invitation message is send over the current MessageProcessor.
            </summary>
            <param name="localContact"></param>
            <param name="remoteContact"></param>
            <param name="filename"></param>
            <param name="file"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.RejectTransfer(MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs)">
            <summary>
            The client programmer should call this if he wants to reject the transfer
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.AcceptTransfer(MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs)">
            <summary>
            The client programmer should call this if he wants to accept the transfer
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CloseAllSessions">
            <summary>
            Closes all sessions by sending the remote client a closing message for each session available.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CloseSession(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Close the specified session
            </summary>
            <param name="transferSession">Session to close</param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnTransferSessionCreated(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Fires the TransferSessionCreated event and registers event handlers.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnTransferSessionClosed(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Fires the TransferSessionClosed event.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnTransferInvitationReceived(MSNPSharp.DataTransfer.MSNSLPInvitationEventArgs)">
            <summary>
            Fires the TransferInvitationReceived event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.GetTransferProperties(System.Guid)">
            <summary>
            Returns the MSNSLPTransferProperties object associated with the specified call id.
            </summary>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CreateHandshakeMessage(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Creates the handshake message to send in a direct connection.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CreateClosingMessage(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Creates a message which is send directly after the last data message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CreateInternalErrorMessage(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Creates an 500 internal error message.
            </summary>
            <param name="transferProperties"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.ParseInvitationMessage(MSNPSharp.DataTransfer.SLPMessage)">
            <summary>
            Parses the incoming invitation message. This will set the class's properties for later retrieval in following messages.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.SendDCInvitation(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Sends the invitation request for a direct connection
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CreateAcceptanceMessage(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Creates a 200 OK message. This is called by the handler after the client-programmer
            has accepted the invitation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.CreateDeclineMessage(MSNPSharp.DataTransfer.MSNSLPTransferProperties)">
            <summary>
            Creates a 603 Decline message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.RemoveTransferSession(MSNPSharp.DataTransfer.P2PTransferSession)">
            <summary>
            Closes the session's datastream and removes the transfer sessions from the class' <see cref="T:MSNPSharp.DataTransfer.P2PMessageSession"/> object (MessageProcessor property).
            </summary>
            <param name="session"></param>
        </member>
        <member name="F:MSNPSharp.DataTransfer.MSNSLPHandler.transferProperties">
            <summary>
            A dictionary containing MSNSLPTransferProperties objects. Indexed by CallId;
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.ExtractChecksum(System.String)">
            <summary>
            Extracts the checksum (SHA1C/SHA1D field) from the supplied context.
            </summary>
            <remarks>The context must be a plain string, no base-64 decoding will be done</remarks>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.MSNSLPHandler_TransferFinished(System.Object,System.EventArgs)">
            <summary>
            Closes the datastream and sends the closing message, if the local client is the receiver. 
            Afterwards the associated <see cref="T:MSNPSharp.DataTransfer.P2PTransferSession"/> object is removed from the class's <see cref="T:MSNPSharp.DataTransfer.P2PMessageSession"/> object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.MSNSLPHandler_TransferAborted(System.Object,System.EventArgs)">
            <summary>
            Cleans up the transfer session.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.HandleMessage(MSNPSharp.Core.IMessageProcessor,MSNPSharp.Core.NetworkMessage)">
            <summary>
            Handles incoming P2P Messages by extracting the inner contents and converting it to a SLP Message.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnSessionCloseRequest(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Called when a remote client closes a session.
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnSessionRequest(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Called when a remote client request a session
            </summary>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.GetNextDirectConnectionPort">
            <summary>
            Returns a port number which can be used to listen for a new direct connection.
            </summary>
            <remarks>Throws an SocketException when no ports can be found.</remarks>
            <returns></returns>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnDCRequest(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Called when the remote client sends a file and sends us it's direct-connect capabilities.
            A reply will be send with the local client's connectivity.
            </summary>
            <param name="p2pMessage"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.OnDCResponse(MSNPSharp.DataTransfer.P2PMessage)">
            <summary>
            Called when the remote client send us it's direct-connect capabilities
            </summary>
            <param name="p2pMessage"></param>
        </member>
        <member name="M:MSNPSharp.DataTransfer.MSNSLPHandler.Dispose">
            <summary>
            Closes all sessions. Dispose() calls Dispose(true)
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPHandler.MessageProcessor">
            <summary>
            The message processor to send outgoing p2p messages to.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPHandler.ExternalEndPoint">
            <summary>
            The client end-point as perceived by the server. This can differ from the actual local endpoint through the use of routers.
            This value is used to determine how to set-up a direct connection.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPHandler.LocalEndPoint">
            <summary>
            The client's local end-point. This can differ from the external endpoint through the use of routers.
            This value is used to determine how to set-up a direct connection.
            </summary>
        </member>
        <member name="P:MSNPSharp.DataTransfer.MSNSLPHandler.MessageSession">
            <summary>
            The message session to send message to. This is simply the MessageProcessor property, but explicitly casted as a P2PMessageSession.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.MSNSLPHandler.TransferSessionCreated">
            <summary>
            Occurs when a transfer session is created.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.MSNSLPHandler.TransferSessionClosed">
            <summary>
            Occurs when a transfer session is closed. Either because the transfer has finished or aborted.
            </summary>
        </member>
        <member name="E:MSNPSharp.DataTransfer.MSNSLPHandler.TransferInvitationReceived">
            <summary>
            Occurs when a remote client has send an invitation for a transfer session.
            </summary>
        </member>
        <member name="P:MSNPSharp.GetWhatsUpCompletedEventArgs.Error">
            <summary>
            InnerException
            </summary>
        </member>
        <member name="M:MSNPSharp.WhatsUpService.GetWhatsUp(System.Int32)">
            <summary>
            Get the recent activities of your contacts.
            </summary>
            <param name="count">Max activity count, must be larger than zero and less than 200.</param>
        </member>
        <member name="P:MSNPSharp.WhatsUpService.FeedUrl">
            <summary>
            RSS feed url for what's up service.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyTypes">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.None">
            <summary>No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxySocket">
            <summary>
            Implements a Socket class that can connect trough a SOCKS proxy server.
            </summary>
            <remarks>This class implements SOCKS4[A] and SOCKS5.<br>It does not, however, implement the BIND commands, so you cannot .</br></remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <param name="proxyPassword">The password to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> -or- <c>proxyPassword</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error Occurred while talking to the proxy server.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="host">The remote host to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error Occurred while talking to the proxy server.</exception>
            <remarks>If you use this method with a SOCKS4 server, it will let the server resolve the hostname. Not all SOCKS4 servers support this 'remote DNS' though.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port on the remote host to connect to.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The asyncResult parameter was not returned by a call to the BeginConnect method.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy server refused the connection.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginDns(System.String,Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <param name="host">The host to resolve.</param>
            <param name="callback">The method to call when the hostname has been resolved.</param>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote host.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnHandShakeComplete(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_State">
            <summary>Holds the value of the State property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyEndPoint">
            <summary>Holds the value of the ProxyEndPoint property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyType">
            <summary>Holds the value of the ProxyType property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyUser">
            <summary>Holds the value of the ProxyUser property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyPass">
            <summary>Holds the value of the ProxyPass property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.CallBack">
            <summary>Holds a pointer to the method that should be called when the Socket is connected to the remote device.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ToThrow">
            <summary>Holds the value of the ToThrow property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_RemotePort">
            <summary>Holds the value of the RemotePort property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the EndPoint of the proxy server.
            </summary>
            <value>An IPEndPoint object that holds the IP address and the port of the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyType">
            <summary>
            Gets or sets the type of proxy server to use.
            </summary>
            <value>One of the ProxyTypes values.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.State">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyUser">
            <summary>
            Gets or sets the username to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the username that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyPass">
            <summary>
            Gets or sets the password to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the password that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.AsyncResult">
            <summary>
            Gets or sets the asynchronous result object.
            </summary>
            <value>An instance of the IAsyncProxyResult class.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ToThrow">
            <summary>
            Gets or sets the exception to throw when the EndConnect method is called.
            </summary>
            <value>An instance of the Exception class (or subclasses of Exception).</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.RemotePort">
            <summary>
            Gets or sets the remote port the user wants to connect to.
            </summary>
            <value>An integer that specifies the port the user wants to connect to.</value>
        </member>
        <member name="M:MSNPSharp.MsnServiceState.#ctor(MSNPSharp.PartnerScenario,System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="scenario">Partner scenario</param>
            <param name="method">Method name</param>
            <param name="async"></param>
        </member>
        <member name="T:MSNPSharp.BeforeRunAsyncMethodEventArgs">
            <summary>
            An object contains the calling information for a MSN async webservice method.
            </summary>
        </member>
        <member name="M:MSNPSharp.BeforeRunAsyncMethodEventArgs.#ctor(System.Web.Services.Protocols.SoapHttpClientProtocol,MSNPSharp.MsnServiceType,MSNPSharp.MsnServiceState,System.Object)">
            <summary>
            Construct a <see cref="T:MSNPSharp.BeforeRunAsyncMethodEventArgs"/> object.
            </summary>
            <param name="ws">Webservice binding to call.</param>
            <param name="st">Service type.</param>
            <param name="ss">Service state object.</param>
            <param name="r">Webservice requst parameter.</param>
        </member>
        <member name="T:MSNPSharp.IO.SerializableMemoryStream">
            <summary>
            Serializable MemoryStream
            </summary>
        </member>
        <member name="T:MSNPSharp.ContactStatusChangedEventArgs">
            <summary>
            Used when contact changed its status.
            </summary>
        </member>
        <member name="T:MSNPSharp.StatusChangedEventArgs">
            <summary>
            Used when a contact changed its status.
            </summary>
        </member>
        <member name="P:MSNPSharp.ContactStatusChangedEventArgs.Contact">
            <summary>
            The contact who changed its status.
            </summary>
        </member>
        <member name="T:MSNPSharp.BaseContactEventArgs">
            <summary>
            Used when any contect event occured.
            </summary>
        </member>
        <member name="P:MSNPSharp.ContactEventArgs.Contact">
            <summary>
            The contact raise the event.
            </summary>
        </member>
        <member name="T:MSNPSharp.ExceptionEventArgs">
            <summary>
            Used in events where a exception is raised. Via these events the client programmer
            can react on these exceptions.
            </summary>
        </member>
        <member name="F:MSNPSharp.ExceptionEventArgs._exception">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MSNPSharp.ExceptionEventArgs.Exception">
            <summary>
            The exception that was raised
            </summary>
        </member>
        <member name="T:MSNPSharp.BaseMessageReceivedEventArgs">
            <summary>
            Base class for all message received event args.
            </summary>
        </member>
        <member name="P:MSNPSharp.BaseMessageReceivedEventArgs.Sender">
            <summary>
            The sender.
            </summary>
        </member>
        <member name="T:MSNPSharp.TextMessageEventArgs">
            <summary>
            Used as event argument when a textual message is send.
            </summary>
        </member>
        <member name="F:MSNPSharp.TextMessageEventArgs.message">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.TextMessageEventArgs.#ctor(MSNPSharp.TextMessage,MSNPSharp.Contact)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="sender"></param>
        </member>
        <member name="P:MSNPSharp.TextMessageEventArgs.Message">
            <summary>
            The message send.
            </summary>
        </member>
        <member name="T:MSNPSharp.EmoticonDefinitionEventArgs">
            <summary>
            Used as event argument when a emoticon definition is send.
            </summary>
        </member>
        <member name="F:MSNPSharp.EmoticonDefinitionEventArgs.emoticon">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.EmoticonDefinitionEventArgs.#ctor(MSNPSharp.Contact,MSNPSharp.Emoticon)">
            <summary>
            Constructor.
            </summary>
            <param name="sender"></param>
            <param name="emoticon"></param>
        </member>
        <member name="P:MSNPSharp.EmoticonDefinitionEventArgs.Emoticon">
            <summary>
            The emoticon which is defined
            </summary>
        </member>
        <member name="T:MSNPSharp.ListReceivedEventArgs">
            <summary>
            Used when a list (FL, Al, BL, RE) is received via synchronize or on request.
            </summary>
        </member>
        <member name="F:MSNPSharp.ListReceivedEventArgs.affectedList">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.ListReceivedEventArgs.#ctor(MSNPSharp.MSNLists)">
            <summary>
            Constructory.
            </summary>
            <param name="affectedList"></param>
        </member>
        <member name="P:MSNPSharp.ListReceivedEventArgs.AffectedList">
            <summary>
            The list which was send by the server
            </summary>
        </member>
        <member name="T:MSNPSharp.SignedOffEventArgs">
            <summary>
            Used when the local user is signed off.
            </summary>
        </member>
        <member name="F:MSNPSharp.SignedOffEventArgs.signedOffReason">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.SignedOffEventArgs.#ctor(MSNPSharp.SignedOffReason)">
            <summary>
            Constructor.
            </summary>
            <param name="signedOffReason"></param>
        </member>
        <member name="P:MSNPSharp.SignedOffEventArgs.SignedOffReason">
            <summary>
            The list which was send by the server
            </summary>
        </member>
        <member name="T:MSNPSharp.PingAnswerEventArgs">
            <summary>
            Used as event argument when an answer to a ping is received.
            </summary>
        </member>
        <member name="F:MSNPSharp.PingAnswerEventArgs.secondsToWait">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.PingAnswerEventArgs.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="P:MSNPSharp.PingAnswerEventArgs.SecondsToWait">
            <summary>
            The number of seconds to wait before sending another PNG, 
            and is reset to 50 every time a command is sent to the server. 
            In environments where idle connections are closed after a short time, 
            you should send a command to the server (even if it's just a PNG) at least this often.
            Note: MSNPSharp does not handle this! E.g. if you experience unexpected connection dropping call the Ping() method.
            </summary>
        </member>
        <member name="T:MSNPSharp.ListMutateEventArgs">
            <summary>
            Used as event argument when any contact list mutates.
            </summary>
        </member>
        <member name="F:MSNPSharp.ListMutateEventArgs.affectedList">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.ListMutateEventArgs.#ctor(MSNPSharp.Contact,MSNPSharp.MSNLists)">
            <summary>
            Constructor
            </summary>
            <param name="contact"></param>
            <param name="affectedList"></param>
        </member>
        <member name="P:MSNPSharp.ListMutateEventArgs.AffectedList">
            <summary>
            The list which mutated.
            </summary>
        </member>
        <member name="T:MSNPSharp.MSNErrorEventArgs">
            <summary>
            Used as event argument when msn sends us an error.
            </summary>	
        </member>
        <member name="F:MSNPSharp.MSNErrorEventArgs.msnError">
            <summary>
            </summary>
        </member>
        <member name="M:MSNPSharp.MSNErrorEventArgs.#ctor(MSNPSharp.MSNError)">
            <summary>
            Constructory.
            </summary>
            <param name="msnError"></param>
        </member>
        <member name="P:MSNPSharp.MSNErrorEventArgs.MSNError">
            <summary>
            The error that occurred
            </summary>
        </member>
        <member name="T:MSNPSharp.BaseCircleEventArgs">
            <summary>
            Base class for circle event arg.
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleEventArgs">
            <summary>
            Used as event argument when a <see cref="P:MSNPSharp.CircleEventArgs.Circle"/> is affected.
            </summary>
        </member>
        <member name="M:MSNPSharp.CircleEventArgs.#ctor(MSNPSharp.Circle)">
            <summary>
            Constructor, mostly used internal by the library.
            </summary>
            <param name="circle"></param>
        </member>
        <member name="M:MSNPSharp.CircleEventArgs.#ctor(MSNPSharp.Circle,MSNPSharp.Contact)">
            <summary>
            Constructor, mostly used internal by the library.
            </summary>
            <param name="circle"></param>
            <param name="remote">The affected Contact.</param>
        </member>
        <member name="P:MSNPSharp.CircleEventArgs.Circle">
            <summary>
            The affected contact group
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleMemberEventArgs">
            <summary>
            Used when a event related to circle member operaion fired.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleMemberEventArgs.Member">
            <summary>
            The contact member raise the event.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleStatusChangedEventArgs.Circle">
            <summary>
            The circle which changed its status.
            </summary>
        </member>
        <member name="T:MSNPSharp.JoinCircleInvitationEventArgs">
            <summary>
            Event argument used for ContactService.JoinCircleInvitationReceived event.
            </summary>
        </member>
        <member name="P:MSNPSharp.JoinCircleInvitationEventArgs.Inviter">
            <summary>
            <see cref="T:MSNPSharp.Contact"/> who send this invitation.
            </summary>
        </member>
        <member name="T:MSNPSharp.CircleTextMessageEventArgs">
            <summary>
            Event argument used for receiving text messages from a circle.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleTextMessageEventArgs.Sender">
            <summary>
            The circle message send from.
            </summary>
        </member>
        <member name="P:MSNPSharp.CircleTextMessageEventArgs.TriggerMember">
            <summary>
            The circle member who send this message.
            </summary>
        </member>
        <member name="P:MSNPSharp.Emoticon.Shortcut">
            <summary>
            The string that will be replaced by the emoticons.
            </summary>
        </member>
    </members>
</doc>
